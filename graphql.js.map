{"version":3,"sources":["graphql.js"],"names":[],"mappings":";;;;;QA0CgB;;AAhChB;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BO,SAAS,OAAT,CACL,MADK,EAEL,aAFK,EAGL,SAHK,EAIL,YAJK,EAKL,cALK,EAML,aANK,EAOmB;AACxB,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,QAAM,SAAS,mBAAW,iBAAiB,EAAjB,EAAqB,iBAAhC,CAAT,CADsB;AAE5B,QAAM,cAAc,mBAAM,MAAN,CAAd,CAFsB;AAG5B,QAAM,mBAAmB,wBAAS,MAAT,EAAiB,WAAjB,CAAnB,CAHsB;AAI5B,QAAI,iBAAiB,MAAjB,GAA0B,CAA1B,EAA6B;AAC/B,cAAQ,EAAE,QAAQ,gBAAR,EAAV,EAD+B;KAAjC,MAEO;AACL,cACE,sBACE,MADF,EAEE,WAFF,EAGE,SAHF,EAIE,YAJF,EAKE,cALF,EAME,aANF,CADF,EADK;KAFP;GAJiB,CAAZ,CAkBJ,KAlBI,CAkBE,iBAAS;AAChB,WAAO,EAAE,QAAQ,CAAE,KAAF,CAAR,EAAT,CADgB;GAAT,CAlBT,CADwB;CAPnB","file":"graphql.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { Source } from './language/source';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nimport type { GraphQLError } from './error/GraphQLError';\nimport type { GraphQLSchema } from './type/schema';\n\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * requestString:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n */\nexport function graphql(\n  schema: GraphQLSchema,\n  requestString: string,\n  rootValue?: mixed,\n  contextValue?: mixed,\n  variableValues?: ?{[key: string]: mixed},\n  operationName?: ?string\n): Promise<GraphQLResult> {\n  return new Promise(resolve => {\n    const source = new Source(requestString || '', 'GraphQL request');\n    const documentAST = parse(source);\n    const validationErrors = validate(schema, documentAST);\n    if (validationErrors.length > 0) {\n      resolve({ errors: validationErrors });\n    } else {\n      resolve(\n        execute(\n          schema,\n          documentAST,\n          rootValue,\n          contextValue,\n          variableValues,\n          operationName\n        )\n      );\n    }\n  }).catch(error => {\n    return { errors: [ error ] };\n  });\n}\n\n/**\n * The result of a GraphQL parse, validation and execution.\n *\n * `data` is the result of a successful execution of the query.\n * `errors` is included when any errors occurred as a non-empty array.\n */\ntype GraphQLResult = {\n  data?: ?Object;\n  errors?: Array<GraphQLError>;\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}