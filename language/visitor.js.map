{"version":3,"sources":["language/visitor.js"],"names":[],"mappings":"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","file":"language/visitor.js","sourcesContent":["/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexport const QueryDocumentKeys = {\n  Name: [],\n\n  Document: [ 'definitions' ],\n  OperationDefinition:\n    [ 'name', 'variableDefinitions', 'directives', 'selectionSet' ],\n  VariableDefinition: [ 'variable', 'type', 'defaultValue' ],\n  Variable: [ 'name' ],\n  SelectionSet: [ 'selections' ],\n  Field: [ 'alias', 'name', 'arguments', 'directives', 'selectionSet' ],\n  Argument: [ 'name', 'value' ],\n\n  FragmentSpread: [ 'name', 'directives' ],\n  InlineFragment: [ 'typeCondition', 'directives', 'selectionSet' ],\n  FragmentDefinition: [ 'name', 'typeCondition', 'directives', 'selectionSet' ],\n\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  EnumValue: [],\n  ListValue: [ 'values' ],\n  ObjectValue: [ 'fields' ],\n  ObjectField: [ 'name', 'value' ],\n\n  Directive: [ 'name', 'arguments' ],\n\n  NamedType: [ 'name' ],\n  ListType: [ 'type' ],\n  NonNullType: [ 'type' ],\n\n  SchemaDefinition: [ 'directives', 'operationTypes' ],\n  OperationTypeDefinition: [ 'type' ],\n\n  ScalarTypeDefinition: [ 'name', 'directives' ],\n  ObjectTypeDefinition: [ 'name', 'interfaces', 'directives', 'fields' ],\n  FieldDefinition: [ 'name', 'arguments', 'type', 'directives' ],\n  InputValueDefinition: [ 'name', 'type', 'defaultValue', 'directives' ],\n  InterfaceTypeDefinition: [ 'name', 'directives', 'fields' ],\n  UnionTypeDefinition: [ 'name', 'directives', 'types' ],\n  EnumTypeDefinition: [ 'name', 'directives', 'values' ],\n  EnumValueDefinition: [ 'name', 'directives' ],\n  InputObjectTypeDefinition: [ 'name', 'directives', 'fields' ],\n\n  TypeExtensionDefinition: [ 'definition' ],\n\n  DirectiveDefinition: [ 'name', 'arguments', 'locations' ],\n};\n\nexport const BREAK = {};\n\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\nexport function visit(root, visitor, keyMap) {\n  const visitorKeys = keyMap || QueryDocumentKeys;\n\n  let stack;\n  let inArray = Array.isArray(root);\n  let keys = [ root ];\n  let index = -1;\n  let edits = [];\n  let parent;\n  const path = [];\n  const ancestors = [];\n  let newRoot = root;\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    let key;\n    let node;\n    const isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path.pop();\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          const clone = {};\n          for (const k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n          node = clone;\n        }\n        let editOffset = 0;\n        for (let ii = 0; ii < edits.length; ii++) {\n          let [ editKey ] = edits[ii];\n          const [ , editValue ] = edits[ii];\n          if (inArray) {\n            editKey -= editOffset;\n          }\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    let result;\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n      const visitFn = getVisitFn(visitor, node.kind, isLeaving);\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([ key, result ]);\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([ key, node ]);\n    }\n\n    if (!isLeaving) {\n      stack = { inArray, index, keys, edits, prev: stack };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return maybeNode && typeof maybeNode.kind === 'string';\n}\n\n\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length);\n\n  return {\n    enter(node) {\n      for (let i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          const fn = getVisitFn(visitors[i], node.kind, /* isLeaving */ false);\n          if (fn) {\n            const result = fn.apply(visitors[i], arguments);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave(node) {\n      for (let i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          const fn = getVisitFn(visitors[i], node.kind, /* isLeaving */ true);\n          if (fn) {\n            const result = fn.apply(visitors[i], arguments);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n\n\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(node) {\n      typeInfo.enter(node);\n      const fn = getVisitFn(visitor, node.kind, /* isLeaving */ false);\n      if (fn) {\n        const result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave(node) {\n      const fn = getVisitFn(visitor, node.kind, /* isLeaving */ true);\n      let result;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n\n\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\nfunction getVisitFn(visitor, kind, isLeaving) {\n  const kindVisitor = visitor[kind];\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n    const kindSpecificVisitor =\n      isLeaving ? kindVisitor.leave : kindVisitor.enter;\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    const specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n      const specificKindVisitor = specificVisitor[kind];\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}