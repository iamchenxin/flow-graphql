{"version":3,"sources":["language/printer.js"],"names":[],"mappings":"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","file":"language/printer.js","sourcesContent":["/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { visit } from './visitor';\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nexport function print(ast) {\n  return visit(ast, { leave: printDocASTReducer });\n}\n\nconst printDocASTReducer = {\n  Name: node => node.value,\n  Variable: node => '$' + node.name,\n\n  // Document\n\n  Document: node => join(node.definitions, '\\n\\n') + '\\n',\n\n  OperationDefinition(node) {\n    const op = node.operation;\n    const name = node.name;\n    const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    const directives = join(node.directives, ' ');\n    const selectionSet = node.selectionSet;\n    // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n    return !name && !directives && !varDefs && op === 'query' ?\n      selectionSet :\n      join([ op, join([ name, varDefs ]), directives, selectionSet ], ' ');\n  },\n\n  VariableDefinition: ({ variable, type, defaultValue }) =>\n    variable + ': ' + type + wrap(' = ', defaultValue),\n\n  SelectionSet: ({ selections }) => block(selections),\n\n  Field: ({ alias, name, arguments: args, directives, selectionSet }) =>\n    join([\n      wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'),\n      join(directives, ' '),\n      selectionSet\n    ], ' '),\n\n  Argument: ({ name, value }) => name + ': ' + value,\n\n  // Fragments\n\n  FragmentSpread: ({ name, directives }) =>\n    '...' + name + wrap(' ', join(directives, ' ')),\n\n  InlineFragment: ({ typeCondition, directives, selectionSet }) =>\n    join([\n      '...',\n      wrap('on ', typeCondition),\n      join(directives, ' '),\n      selectionSet\n    ], ' '),\n\n  FragmentDefinition: ({ name, typeCondition, directives, selectionSet }) =>\n    `fragment ${name} on ${typeCondition} ` +\n    wrap('', join(directives, ' '), ' ') +\n    selectionSet,\n\n  // Value\n\n  IntValue: ({ value }) => value,\n  FloatValue: ({ value }) => value,\n  StringValue: ({ value }) => JSON.stringify(value),\n  BooleanValue: ({ value }) => JSON.stringify(value),\n  EnumValue: ({ value }) => value,\n  ListValue: ({ values }) => '[' + join(values, ', ') + ']',\n  ObjectValue: ({ fields }) => '{' + join(fields, ', ') + '}',\n  ObjectField: ({ name, value }) => name + ': ' + value,\n\n  // Directive\n\n  Directive: ({ name, arguments: args }) =>\n    '@' + name + wrap('(', join(args, ', '), ')'),\n\n  // Type\n\n  NamedType: ({ name }) => name,\n  ListType: ({ type }) => '[' + type + ']',\n  NonNullType: ({ type }) => type + '!',\n\n  // Type System Definitions\n\n  SchemaDefinition: ({ directives, operationTypes }) =>\n    join([\n      'schema',\n      join(directives, ' '),\n      block(operationTypes),\n    ], ' '),\n\n  OperationTypeDefinition: ({ operation, type }) =>\n    operation + ': ' + type,\n\n  ScalarTypeDefinition: ({ name, directives }) =>\n    join([ 'scalar', name, join(directives, ' ') ], ' '),\n\n  ObjectTypeDefinition: ({ name, interfaces, directives, fields }) =>\n    join([\n      'type',\n      name,\n      wrap('implements ', join(interfaces, ', ')),\n      join(directives, ' '),\n      block(fields)\n    ], ' '),\n\n  FieldDefinition: ({ name, arguments: args, type, directives }) =>\n    name +\n    wrap('(', join(args, ', '), ')') +\n    ': ' + type +\n    wrap(' ', join(directives, ' ')),\n\n  InputValueDefinition: ({ name, type, defaultValue, directives }) =>\n    join([\n      name + ': ' + type,\n      wrap('= ', defaultValue),\n      join(directives, ' ')\n    ], ' '),\n\n  InterfaceTypeDefinition: ({ name, directives, fields }) =>\n    join([\n      'interface',\n      name,\n      join(directives, ' '),\n      block(fields)\n    ], ' '),\n\n  UnionTypeDefinition: ({ name, directives, types }) =>\n    join([\n      'union',\n      name,\n      join(directives, ' '),\n      '= ' + join(types, ' | ')\n    ], ' '),\n\n  EnumTypeDefinition: ({ name, directives, values }) =>\n    join([\n      'enum',\n      name,\n      join(directives, ' '),\n      block(values)\n    ], ' '),\n\n  EnumValueDefinition: ({ name, directives }) =>\n    join([ name, join(directives, ' ') ], ' '),\n\n  InputObjectTypeDefinition: ({ name, directives, fields }) =>\n    join([\n      'input',\n      name,\n      join(directives, ' '),\n      block(fields)\n    ], ' '),\n\n  TypeExtensionDefinition: ({ definition }) => `extend ${definition}`,\n\n  DirectiveDefinition: ({ name, arguments: args, locations }) =>\n    'directive @' + name + wrap('(', join(args, ', '), ')') +\n    ' on ' + join(locations, ' | '),\n};\n\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(x => x).join(separator || '') : '';\n}\n\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n  return array && array.length !== 0 ?\n    indent('{\\n' + join(array, '\\n')) + '\\n}' :\n    '{}';\n}\n\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n  return maybeString ?\n    start + maybeString + (end || '') :\n    '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && maybeString.replace(/\\n/g, '\\n  ');\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}