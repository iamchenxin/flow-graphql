{"version":3,"sources":["type/scalars.js"],"names":[],"mappings":";;;;;;;AAUA;;AACA;;;;;;;;;;;;;;;;;AAOA,IAAM,UAAU,UAAV;AACN,IAAM,UAAU,CAAC,UAAD;;AAEhB,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,MAAM,MAAM,OAAO,KAAP,CAAN,CADkB;AAExB,MAAI,QAAQ,GAAR,IAAe,OAAO,OAAP,IAAkB,OAAO,OAAP,EAAgB;AACnD,WAAO,CAAC,MAAM,CAAN,GAAU,KAAK,IAAL,GAAY,KAAK,KAAL,CAAvB,CAAmC,GAAnC,CAAP,CADmD;GAArD;AAGA,SAAO,IAAP,CALwB;CAA1B;;AASO,IAAM,kCAAa,kCAAsB;AAC9C,QAAM,KAAN;AACA,eACE,0EACA,iEADA;AAEF,aAAW,SAAX;AACA,cAAY,SAAZ;AACA,sCAAa,KAAK;AAChB,QAAI,IAAI,IAAJ,KAAa,eAAK,GAAL,EAAU;AACzB,UAAM,MAAM,SAAS,IAAI,KAAJ,EAAW,EAApB,CAAN,CADmB;AAEzB,UAAI,OAAO,OAAP,IAAkB,OAAO,OAAP,EAAgB;AACpC,eAAO,GAAP,CADoC;OAAtC;KAFF;AAMA,WAAO,IAAP,CAPgB;GAP4B;CAAtB,CAAb;;AAkBb,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B,MAAM,MAAM,OAAO,KAAP,CAAN,CADoB;AAE1B,SAAO,QAAQ,GAAR,GAAc,GAAd,GAAoB,IAApB,CAFmB;CAA5B;;AAKO,IAAM,sCAAe,kCAAsB;AAChD,QAAM,OAAN;AACA,eACE,2EACA,yBADA,GAEA,gEAFA;AAGF,aAAW,WAAX;AACA,cAAY,WAAZ;AACA,sCAAa,KAAK;AAChB,WAAO,IAAI,IAAJ,KAAa,eAAK,KAAL,IAAc,IAAI,IAAJ,KAAa,eAAK,GAAL,GAC7C,WAAW,IAAI,KAAJ,CADN,GAEL,IAFK,CADS;GAR8B;CAAtB,CAAf;;AAeN,IAAM,wCAAgB,kCAAsB;AACjD,QAAM,QAAN;AACA,eACE,4EACA,wEADA,GAEA,0CAFA;AAGF,aAAW,MAAX;AACA,cAAY,MAAZ;AACA,sCAAa,KAAK;AAChB,WAAO,IAAI,IAAJ,KAAa,eAAK,MAAL,GAAc,IAAI,KAAJ,GAAY,IAAvC,CADS;GAR+B;CAAtB,CAAhB;;AAaN,IAAM,0CAAiB,kCAAsB;AAClD,QAAM,SAAN;AACA,eAAa,yDAAb;AACA,aAAW,OAAX;AACA,cAAY,OAAZ;AACA,sCAAa,KAAK;AAChB,WAAO,IAAI,IAAJ,KAAa,eAAK,OAAL,GAAe,IAAI,KAAJ,GAAY,IAAxC,CADS;GALgC;CAAtB,CAAjB;;AAUN,IAAM,gCAAY,kCAAsB;AAC7C,QAAM,IAAN;AACA,eACE,wEACA,yEADA,GAEA,0EAFA,GAGA,wEAHA,GAIA,sDAJA;AAKF,aAAW,MAAX;AACA,cAAY,MAAZ;AACA,sCAAa,KAAK;AAChB,WAAO,IAAI,IAAJ,KAAa,eAAK,MAAL,IAAe,IAAI,IAAJ,KAAa,eAAK,GAAL,GAC9C,IAAI,KAAJ,GACA,IAFK,CADS;GAV2B;CAAtB,CAAZ","file":"type/scalars.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { GraphQLScalarType } from './definition';\nimport { Kind } from '../language';\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\nconst MAX_INT = 2147483647;\nconst MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  const num = Number(value);\n  if (num === num && num <= MAX_INT && num >= MIN_INT) {\n    return (num < 0 ? Math.ceil : Math.floor)(num);\n  }\n  return null;\n\n}\n\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric ' +\n    'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      const num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return null;\n  }\n});\n\nfunction coerceFloat(value) {\n  const num = Number(value);\n  return num === num ? num : null;\n}\n\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional ' +\n    'values as specified by ' +\n    '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ?\n      parseFloat(ast.value) :\n      null;\n  }\n});\n\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 ' +\n    'character sequences. The String type is most often used by GraphQL to ' +\n    'represent free-form human-readable text.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : null;\n  }\n});\n\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : null;\n  }\n});\n\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to ' +\n    'refetch an object or as key for a cache. The ID type appears in a JSON ' +\n    'response as a String; however, it is not intended to be human-readable. ' +\n    'When expected as an input type, any string (such as `\"4\"`) or integer ' +\n    '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ?\n      ast.value :\n      null;\n  }\n});\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}