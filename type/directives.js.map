{"version":3,"sources":["type/directives.js"],"names":[],"mappings":"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","file":"type/directives.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { isInputType, GraphQLNonNull } from './definition';\nimport type {\n  GraphQLFieldConfigArgumentMap,\n  GraphQLArgument\n} from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport invariant from '../jsutils/invariant';\nimport { assertValidName } from '../utilities/assertValidName';\n\n\nexport const DirectiveLocation = {\n  // Operations\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  // Schema Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION',\n};\n\nexport type DirectiveLocationEnum = $Keys<typeof DirectiveLocation>; // eslint-disable-line\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  name: string;\n  description: ?string;\n  locations: Array<DirectiveLocationEnum>;\n  args: Array<GraphQLArgument>;\n\n  constructor(config: GraphQLDirectiveConfig) {\n    invariant(config.name, 'Directive must be named.');\n    assertValidName(config.name);\n    invariant(\n      Array.isArray(config.locations),\n      'Must provide locations for directive.'\n    );\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n\n    const args = config.args;\n    if (!args) {\n      this.args = [];\n    } else {\n      invariant(\n        !Array.isArray(args),\n        `@${config.name} args must be an object with argument names as keys.`\n      );\n      this.args = Object.keys(args).map(argName => {\n        assertValidName(argName);\n        const arg = args[argName];\n        invariant(\n          isInputType(arg.type),\n          `@${config.name}(${argName}:) argument type must be ` +\n          `Input Type but got: ${String(arg.type)}.`\n        );\n        return {\n          name: argName,\n          description: arg.description === undefined ? null : arg.description,\n          type: arg.type,\n          defaultValue: arg.defaultValue === undefined ? null : arg.defaultValue\n        };\n      });\n    }\n  }\n}\n\ntype GraphQLDirectiveConfig = {\n  name: string;\n  description?: ?string;\n  locations: Array<DirectiveLocationEnum>;\n  args?: ?GraphQLFieldConfigArgumentMap;\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when ' +\n    'the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  },\n});\n\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` ' +\n    'argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  },\n});\n\n/**\n * Constant string used for default reason for a deprecation.\n */\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description:\n    'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a ' +\n        'suggestion for how to access supported similar data. Formatted' +\n        'in [Markdown](https://daringfireball.net/projects/markdown/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  },\n});\n\n/**\n * The full list of specified directives.\n */\nexport const specifiedDirectives: Array<GraphQLDirective> = [\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n];\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}