{"version":3,"sources":["type/introspection.js"],"names":[],"mappings":"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","file":"type/introspection.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport isNullish from '../jsutils/isNullish';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport {\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from './directives';\nimport type { GraphQLFieldDefinition } from './definition';\n\n\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It ' +\n    'exposes all available types and directives on the server, as well as ' +\n    'the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n      resolve(schema) {\n        const typeMap = schema.getTypeMap();\n        return Object.keys(typeMap).map(key => typeMap[key]);\n      }\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: schema => schema.getQueryType()\n    },\n    mutationType: {\n      description: 'If this server supports mutation, the type that ' +\n                   'mutation operations will be rooted at.',\n      type: __Type,\n      resolve: schema => schema.getMutationType()\n    },\n    subscriptionType: {\n      description: 'If this server support subscription, the type that ' +\n                   'subscription operations will be rooted at.',\n      type: __Type,\n      resolve: schema => schema.getSubscriptionType()\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type:\n        new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),\n      resolve: schema => schema.getDirectives(),\n    }\n  })\n});\n\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    'A Directive provides a way to describe alternate runtime execution and ' +\n    'type validation behavior in a GraphQL document.' +\n    '\\n\\nIn some cases, you need to provide options to alter GraphQL’s ' +\n    'execution behavior in ways field arguments will not suffice, such as ' +\n    'conditionally including or skipping a field. Directives provide this by ' +\n    'describing additional information to the executor.',\n  fields: () => ({\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    description: { type: GraphQLString },\n    locations: {\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(\n        __DirectiveLocation\n      )))\n    },\n    args: {\n      type:\n        new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),\n      resolve: directive => directive.args || []\n    },\n    // NOTE: the following three fields are deprecated and are no longer part\n    // of the GraphQL specification.\n    onOperation: {\n      deprecationReason: 'Use `locations`.',\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: d =>\n        d.locations.indexOf(DirectiveLocation.QUERY) !== -1 ||\n        d.locations.indexOf(DirectiveLocation.MUTATION) !== -1 ||\n        d.locations.indexOf(DirectiveLocation.SUBSCRIPTION) !== -1\n    },\n    onFragment: {\n      deprecationReason: 'Use `locations`.',\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: d =>\n        d.locations.indexOf(DirectiveLocation.FRAGMENT_SPREAD) !== -1 ||\n        d.locations.indexOf(DirectiveLocation.INLINE_FRAGMENT) !== -1 ||\n        d.locations.indexOf(DirectiveLocation.FRAGMENT_DEFINITION) !== -1\n    },\n    onField: {\n      deprecationReason: 'Use `locations`.',\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: d => d.locations.indexOf(DirectiveLocation.FIELD) !== -1\n    },\n  }),\n});\n\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a ' +\n    '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    },\n  }\n});\n\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are ' +\n    'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' +\n    '\\n\\nDepending on the kind of a type, certain fields describe ' +\n    'information about that type. Scalar types provide no information ' +\n    'beyond a name and description, while Enum types provide their values. ' +\n    'Object and Interface types provide the fields they describe. Abstract ' +\n    'types, Union and Interface, provide the Object types possible ' +\n    'at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n      resolve(type) {\n        if (type instanceof GraphQLScalarType) {\n          return TypeKind.SCALAR;\n        } else if (type instanceof GraphQLObjectType) {\n          return TypeKind.OBJECT;\n        } else if (type instanceof GraphQLInterfaceType) {\n          return TypeKind.INTERFACE;\n        } else if (type instanceof GraphQLUnionType) {\n          return TypeKind.UNION;\n        } else if (type instanceof GraphQLEnumType) {\n          return TypeKind.ENUM;\n        } else if (type instanceof GraphQLInputObjectType) {\n          return TypeKind.INPUT_OBJECT;\n        } else if (type instanceof GraphQLList) {\n          return TypeKind.LIST;\n        } else if (type instanceof GraphQLNonNull) {\n          return TypeKind.NON_NULL;\n        }\n        throw new Error('Unknown kind of type: ' + type);\n      }\n    },\n    name: { type: GraphQLString },\n    description: { type: GraphQLString },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: { type: GraphQLBoolean, defaultValue: false }\n      },\n      resolve(type, { includeDeprecated }) {\n        if (type instanceof GraphQLObjectType ||\n            type instanceof GraphQLInterfaceType) {\n          const fieldMap = type.getFields();\n          let fields =\n            Object.keys(fieldMap).map(fieldName => fieldMap[fieldName]);\n          if (!includeDeprecated) {\n            fields = fields.filter(field => !field.deprecationReason);\n          }\n          return fields;\n        }\n        return null;\n      }\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n      resolve(type) {\n        if (type instanceof GraphQLObjectType) {\n          return type.getInterfaces();\n        }\n      }\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n      resolve(type, args, context, { schema }) {\n        if (type instanceof GraphQLInterfaceType ||\n            type instanceof GraphQLUnionType) {\n          return schema.getPossibleTypes(type);\n        }\n      }\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: { type: GraphQLBoolean, defaultValue: false }\n      },\n      resolve(type, { includeDeprecated }) {\n        if (type instanceof GraphQLEnumType) {\n          let values = type.getValues();\n          if (!includeDeprecated) {\n            values = values.filter(value => !value.deprecationReason);\n          }\n          return values;\n        }\n      }\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      resolve(type) {\n        if (type instanceof GraphQLInputObjectType) {\n          const fieldMap = type.getFields();\n          return Object.keys(fieldMap).map(fieldName => fieldMap[fieldName]);\n        }\n      }\n    },\n    ofType: { type: __Type }\n  })\n});\n\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of ' +\n    'which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    description: { type: GraphQLString },\n    args: {\n      type:\n        new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),\n      resolve: field => field.args || []\n    },\n    type: { type: new GraphQLNonNull(__Type) },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: field => !isNullish(field.deprecationReason),\n    },\n    deprecationReason: {\n      type: GraphQLString,\n    }\n  })\n});\n\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an ' +\n    'InputObject are represented as Input Values which describe their type ' +\n    'and optionally a default value.',\n  fields: () => ({\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    description: { type: GraphQLString },\n    type: { type: new GraphQLNonNull(__Type) },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this ' +\n        'input value.',\n      resolve: inputVal => isNullish(inputVal.defaultValue) ?\n        null :\n        print(astFromValue(inputVal.defaultValue, inputVal))\n    }\n  })\n});\n\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not ' +\n    'a placeholder for a string or numeric value. However an Enum value is ' +\n    'returned in a JSON response as a string.',\n  fields: () => ({\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    description: { type: GraphQLString },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: enumValue => !isNullish(enumValue.deprecationReason),\n    },\n    deprecationReason: {\n      type: GraphQLString,\n    }\n  })\n});\n\nexport const TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL',\n};\n\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' +\n                   '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' +\n                   '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' +\n                   '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' +\n                   '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' +\n                   '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' +\n                   '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' +\n                   '`ofType` is a valid field.'\n    },\n  }\n});\n\n/**\n * Note that these are GraphQLFieldDefinition and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef: GraphQLFieldDefinition = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (source, args, context, { schema }) => schema\n};\n\nexport const TypeMetaFieldDef: GraphQLFieldDefinition = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    { name: 'name', type: new GraphQLNonNull(GraphQLString) }\n  ],\n  resolve: (source, { name }: { name: string }, context, { schema }) =>\n    schema.getType(name)\n};\n\nexport const TypeNameMetaFieldDef: GraphQLFieldDefinition = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (source, args, context, { parentType }) => parentType.name\n};\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}