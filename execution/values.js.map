{"version":3,"sources":["execution/values.js"],"names":[],"mappings":"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","file":"execution/values.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { GraphQLError } from '../error';\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport keyMap from '../jsutils/keyMap';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { valueFromAST } from '../utilities/valueFromAST';\nimport { isValidJSValue } from '../utilities/isValidJSValue';\nimport { print } from '../language/printer';\nimport {\n  isInputType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport type { GraphQLInputType, GraphQLArgument } from '../type/definition';\nimport type { GraphQLSchema } from '../type/schema';\nimport type { Argument, VariableDefinition } from '../language/ast';\n\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n */\nexport function getVariableValues(\n  schema: GraphQLSchema,\n  definitionASTs: Array<VariableDefinition>,\n  inputs: { [key: string]: mixed }\n): { [key: string]: mixed } {\n  return definitionASTs.reduce((values, defAST) => {\n    const varName = defAST.variable.name.value;\n    values[varName] = getVariableValue(schema, defAST, inputs[varName]);\n    return values;\n  }, {});\n}\n\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n */\nexport function getArgumentValues(\n  argDefs: ?Array<GraphQLArgument>,\n  argASTs: ?Array<Argument>,\n  variableValues?: ?{ [key: string]: mixed }\n): { [key: string]: mixed } {\n  if (!argDefs || !argASTs) {\n    return {};\n  }\n  const argASTMap = keyMap(argASTs, arg => arg.name.value);\n  return argDefs.reduce((result, argDef) => {\n    const name = argDef.name;\n    const valueAST = argASTMap[name] ? argASTMap[name].value : null;\n    let value = valueFromAST(valueAST, argDef.type, variableValues);\n    if (isNullish(value)) {\n      value = argDef.defaultValue;\n    }\n    if (!isNullish(value)) {\n      result[name] = value;\n    }\n    return result;\n  }, {});\n}\n\n\n/**\n * Given a variable definition, and any value of input, return a value which\n * adheres to the variable definition, or throw an error.\n */\nfunction getVariableValue(\n  schema: GraphQLSchema,\n  definitionAST: VariableDefinition,\n  input: mixed\n): mixed {\n  const type = typeFromAST(schema, definitionAST.type);\n  const variable = definitionAST.variable;\n  if (!type || !isInputType(type)) {\n    throw new GraphQLError(\n      `Variable \"$${variable.name.value}\" expected value of type ` +\n      `\"${print(definitionAST.type)}\" which cannot be used as an input type.`,\n      [ definitionAST ]\n    );\n  }\n  const inputType = ((type: any): GraphQLInputType);\n  const errors = isValidJSValue(input, inputType);\n  if (!errors.length) {\n    if (isNullish(input)) {\n      const defaultValue = definitionAST.defaultValue;\n      if (defaultValue) {\n        return valueFromAST(defaultValue, inputType);\n      }\n    }\n    return coerceValue(inputType, input);\n  }\n  if (isNullish(input)) {\n    throw new GraphQLError(\n      `Variable \"$${variable.name.value}\" of required type ` +\n      `\"${print(definitionAST.type)}\" was not provided.`,\n      [ definitionAST ]\n    );\n  }\n  const message = errors ? '\\n' + errors.join('\\n') : '';\n  throw new GraphQLError(\n    `Variable \"$${variable.name.value}\" got invalid value ` +\n    `${JSON.stringify(input)}.${message}`,\n    [ definitionAST ]\n  );\n}\n\n/**\n * Given a type and any value, return a runtime value coerced to match the type.\n */\nfunction coerceValue(type: GraphQLInputType, value: mixed): mixed {\n  // Ensure flow knows that we treat function params as const.\n  const _value = value;\n\n  if (type instanceof GraphQLNonNull) {\n    // Note: we're not checking that the result of coerceValue is non-null.\n    // We only call this function after calling isValidJSValue.\n    return coerceValue(type.ofType, _value);\n  }\n\n  if (isNullish(_value)) {\n    return null;\n  }\n\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    // TODO: support iterable input\n    if (Array.isArray(_value)) {\n      return _value.map(item => coerceValue(itemType, item));\n    }\n    return [ coerceValue(itemType, _value) ];\n  }\n\n  if (type instanceof GraphQLInputObjectType) {\n    if (typeof _value !== 'object' || _value === null) {\n      return null;\n    }\n    const fields = type.getFields();\n    return Object.keys(fields).reduce((obj, fieldName) => {\n      const field = fields[fieldName];\n      let fieldValue = coerceValue(field.type, _value[fieldName]);\n      if (isNullish(fieldValue)) {\n        fieldValue = field.defaultValue;\n      }\n      if (!isNullish(fieldValue)) {\n        obj[fieldName] = fieldValue;\n      }\n      return obj;\n    }, {});\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must be input type'\n  );\n\n  const parsed = type.parseValue(_value);\n  if (!isNullish(parsed)) {\n    return parsed;\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}