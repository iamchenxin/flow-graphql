{"version":3,"sources":["error/GraphQLError.js"],"names":[],"mappings":";;;;;;;AAUA;;;;;;;;;;;;;;;;IAKa;;;AAUX,wBACE,OADF;;AAGE,OAHF,YAIE,KAJF,EAKE,MALF,EAME,SANF,EAOE,IAPF,EAQE,aARF,EASE;;;gGACM,UADN;;AAGA,WAAO,cAAP,QAA4B,SAA5B,EAAuC;AACrC,aAAO,OAAP;;;;AAIA,kBAAY,IAAZ;;;AAGA,gBAAU,IAAV;KARF,EAHA;;AAcA,WAAO,cAAP,QAA4B,OAA5B,EAAqC;AACnC,aAAO,SAAS,OAAT;;;;AAIP,gBAAU,IAAV;KALF,EAdA;;AAsBA,WAAO,cAAP,QAA4B,OAA5B,EAAqC,EAAE,OAAO,KAAP,EAAvC;;;AAtBA,UAyBA,CAAO,cAAP,QAA4B,QAA5B,EAAuC;AACrC,0BAAM;AACJ,YAAI,MAAJ,EAAY;AACV,iBAAO,MAAP,CADU;SAAZ;AAGA,YAAI,SAAS,MAAM,MAAN,GAAe,CAAf,EAAkB;AAC7B,cAAM,OAAO,MAAM,CAAN,CAAP,CADuB;AAE7B,iBAAO,QAAQ,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,MAAT,CAFE;SAA/B;OALmC;KAAvC,EAzBA;;AAqCA,WAAO,cAAP,QAA4B,WAA5B,EAA0C;AACxC,0BAAM;AACJ,YAAI,SAAJ,EAAe;AACb,iBAAO,SAAP,CADa;SAAf;AAGA,YAAI,KAAJ,EAAW;AACT,cAAM,gBAAgB,MAAM,GAAN,CAAU;mBAAQ,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,KAAT;WAApB,CAA1B,CADG;AAET,cAAI,cAAc,IAAd,CAAmB;mBAAK;WAAL,CAAvB,EAAgC;AAC9B,mBAAO,aAAP,CAD8B;WAAhC;SAFF;OALsC;KAA1C,EArCA;;AAmDA,WAAO,cAAP,QAA4B,WAA5B,EAA0C;AACxC,0BAAM;AACJ,YAAM,aAAa,KAAK,SAAL,CADf;AAEJ,YAAM,UAAU,KAAK,MAAL,CAFZ;AAGJ,YAAI,cAAc,WAAW,MAAX,GAAoB,CAApB,IAAyB,OAAvC,EAAgD;AAClD,iBAAO,WAAW,GAAX,CAAe;mBAAO,2BAAY,OAAZ,EAAqB,GAArB;WAAP,CAAtB,CADkD;SAApD;OAJsC;;;;;AAWxC,kBAAY,IAAZ;KAXF,EAnDA;;AAiEA,WAAO,cAAP,QAA4B,MAA5B,EAAoC;AAClC,aAAO,IAAP;;;;AAIA,kBAAY,IAAZ;KALF,EAjEA;;AAyEA,WAAO,cAAP,QAA4B,eAA5B,EAA6C;AAC3C,aAAO,aAAP;KADF,EAzEA;;GATF;;;EAVgC","file":"error/GraphQLError.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { getLocation } from '../language';\nimport type { Node } from '../language/ast';\nimport type { Source } from '../language/source';\n\n\nexport class GraphQLError extends Error {\n  message: string;\n  stack: string;\n  nodes: ?Array<Node>;\n  source: ?Source;\n  positions: ?Array<number>;\n  locations: ?Array<{ line: number, column: number }>;\n  path: ?Array<string | number>;\n  originalError: ?Error;\n\n  constructor(\n    message: string,\n    // A flow bug keeps us from declaring nodes as an array of Node\n    nodes?: Array<any/* Node */>,\n    stack?: ?string,\n    source?: ?Source,\n    positions?: ?Array<number>,\n    path?: ?Array<string|number>,\n    originalError?: ?Error\n  ) {\n    super(message);\n\n    Object.defineProperty(this, 'message', {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      // Note: you really shouldn't overwrite message, but it enables\n      // Error brand-checking.\n      writable: true,\n    });\n\n    Object.defineProperty(this, 'stack', {\n      value: stack || message,\n      // Note: stack should not really be writable, but some libraries (such\n      // as bluebird) use Error brand-checking which specifically looks to see\n      // if stack is a writable property.\n      writable: true,\n    });\n\n    Object.defineProperty(this, 'nodes', { value: nodes });\n\n    // Note: flow does not yet know about Object.defineProperty with `get`.\n    Object.defineProperty(this, 'source', ({\n      get() {\n        if (source) {\n          return source;\n        }\n        if (nodes && nodes.length > 0) {\n          const node = nodes[0];\n          return node && node.loc && node.loc.source;\n        }\n      }\n    }: any));\n\n    Object.defineProperty(this, 'positions', ({\n      get() {\n        if (positions) {\n          return positions;\n        }\n        if (nodes) {\n          const nodePositions = nodes.map(node => node.loc && node.loc.start);\n          if (nodePositions.some(p => p)) {\n            return nodePositions;\n          }\n        }\n      }\n    }: any));\n\n    Object.defineProperty(this, 'locations', ({\n      get() {\n        const _positions = this.positions;\n        const _source = this.source;\n        if (_positions && _positions.length > 0 && _source) {\n          return _positions.map(pos => getLocation(_source, pos));\n        }\n      },\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n    }: any));\n\n    Object.defineProperty(this, 'path', {\n      value: path,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'originalError', {\n      value: originalError\n    });\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}