{"version":3,"sources":["error/GraphQLError.js"],"names":[],"mappings":";;;;;QAuEgB;;AA7DhB;;;;;;;;AA6DO,SAAS,YAAT;AACL,OADK,EAEL,KAFK,EAGL,MAHK,EAIL,SAJK,EAKL,IALK,EAML,aANK,EAOL;;AAEA,MAAI,iBAAiB,cAAc,KAAd,EAAqB;AACxC,WAAO,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnC,aAAO,cAAc,KAAd;AACP,gBAAU,IAAV;KAFF,EADwC;GAA1C,MAKO,IAAI,MAAM,iBAAN,EAAyB;AAClC,UAAM,iBAAN,CAAwB,IAAxB,EAA8B,YAA9B,EADkC;GAA7B,MAEA;AACL,WAAO,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnC,aAAO,QAAQ,KAAR;AACP,gBAAU,IAAV;KAFF,EADK;GAFA;;;AAPP,MAiBI,UAAU,MAAV,CAjBJ;AAkBA,MAAI,CAAC,OAAD,IAAY,KAAZ,IAAqB,MAAM,MAAN,GAAe,CAAf,EAAkB;AACzC,QAAM,OAAO,MAAM,CAAN,CAAP,CADmC;AAEzC,cAAU,QAAQ,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,MAAT,CAFW;GAA3C;;AAKA,MAAI,aAAa,SAAb,CAvBJ;AAwBA,MAAI,CAAC,UAAD,IAAe,KAAf,EAAsB;AACxB,iBAAa,MAAM,GAAN,CAAU;aAAQ,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,KAAT;KAApB,CAAV,CAA8C,MAA9C,CAAqD,OAArD,CAAb,CADwB;GAA1B;AAGA,MAAI,cAAc,WAAW,MAAX,KAAsB,CAAtB,EAAyB;AACzC,iBAAa,SAAb,CADyC;GAA3C;;AAIA,MAAI,sBAAJ,CA/BA;AAgCA,MAAI,WAAW,UAAX,EAAuB;AACzB,iBAAa,WAAW,GAAX,CAAe;aAAO,2BAAY,OAAZ,EAAqB,GAArB;KAAP,CAA5B,CADyB;GAA3B;;AAIA,SAAO,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,aAAS;AACP,aAAO,OAAP;;;;AAIA,kBAAY,IAAZ;AACA,gBAAU,IAAV;KANF;AAQA,eAAW;;;AAGT,aAAO,cAAc,SAAd;;;;AAIP,kBAAY,IAAZ;KAPF;AASA,UAAM;;;AAGJ,aAAO,QAAQ,SAAR;;;;AAIP,kBAAY,IAAZ;KAPF;AASA,WAAO;AACL,aAAO,SAAS,SAAT;KADT;AAGA,YAAQ;AACN,aAAO,WAAW,SAAX;KADT;AAGA,eAAW;AACT,aAAO,cAAc,SAAd;KADT;AAGA,mBAAe;AACb,aAAO,aAAP;KADF;GApCF,EApCA;CAPK;;;;;;;;;;AAqFP,aAAoB,SAApB,GAAgC,OAAO,MAAP,CAAc,MAAM,SAAN,EAAiB;AAC7D,eAAa,EAAE,OAAO,YAAP,EAAf;AACA,QAAM,EAAE,OAAO,cAAP,EAAR;CAF8B,CAAhC","file":"error/GraphQLError.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { getLocation } from '../language';\nimport type { Node } from '../language/ast';\nimport type { Source } from '../language/source';\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\ndeclare class GraphQLError extends Error {\n\n  /**\n   * A message describing the Error for debugging purposes.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n  message: string,\n\n  /**\n   * An array of { line, column } locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n  locations: Array<{ line: number, column: number }> | void;\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n  path: Array<string | number> | void;\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n  nodes: Array<Node> | void;\n\n  /**\n   * The source GraphQL document corresponding to this error.\n   */\n  source: Source | void;\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n  positions: Array<number> | void;\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n  originalError: ?Error;\n}\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\n  message: string,\n  nodes?: ?Array<*>,\n  source?: ?Source,\n  positions?: ?Array<number>,\n  path?: ?Array<string | number>,\n  originalError?: ?Error\n) {\n  // Include (non-enumerable) stack trace.\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true\n    });\n  }\n\n  // Compute locations in the source for the given nodes/positions.\n  let _source = source;\n  if (!_source && nodes && nodes.length > 0) {\n    const node = nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  let _positions = positions;\n  if (!_positions && nodes) {\n    _positions = nodes.map(node => node.loc && node.loc.start).filter(Boolean);\n  }\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  let _locations;\n  if (_source && _positions) {\n    _locations = _positions.map(pos => getLocation(_source, pos));\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplist possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    nodes: {\n      value: nodes || undefined\n    },\n    source: {\n      value: _source || undefined,\n    },\n    positions: {\n      value: _positions || undefined,\n    },\n    originalError: {\n      value: originalError\n    }\n  });\n}\n\n(GraphQLError: any).prototype = Object.create(Error.prototype, {\n  constructor: { value: GraphQLError },\n  name: { value: 'GraphQLError' }\n});\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}