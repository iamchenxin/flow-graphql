{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;oBAoCE;;;;;;;;;iBAMA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBAGA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBACA;;;;;;iBAGA;;;;;;iBACA;;;;;;;;;qBAMA;;;;;;qBACA;;;;;;qBAGA;;;;;;qBACA;;;;;;qBAGA;;;;;;qBAGA;;;;;;qBACA;;;;;;qBACA;;;;;;qBACA;;;;;;qBACA;;;;;;qBACA;;;;;;;;;sBAMA;;;;;;;;;uBAMA;;;;;;uBACA;;;;;;;;;kBAMA;;;;;;kBACA;;;;;;;;;sBAOA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAIA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAIA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBAGA;;;;;;sBACA;;;;;;sBACA;;;;;;sBAGA","file":"index.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n\n// The primary entry point into fulfilling a GraphQL request.\nexport {\n  graphql\n} from './graphql';\n\n\n// Create and operate on GraphQL type definitions and schema.\nexport {\n  GraphQLSchema,\n\n  // Definitions\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLDirective,\n\n  // \"Enum\" of Type Kinds\n  TypeKind,\n\n  // \"Enum\" of Directive Locations\n  DirectiveLocation,\n\n  // Scalars\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID,\n\n  // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n\n  // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON,\n\n  // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n\n  // GraphQL Types for introspection.\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n\n  // Predicates\n  isType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n\n  // Un-modifiers\n  getNullableType,\n  getNamedType,\n} from './type';\n\n\n// Parse and operate on GraphQL language source files.\nexport {\n  Source,\n  getLocation,\n\n  // Parse\n  parse,\n  parseValue,\n\n  // Print\n  print,\n\n  // Visit\n  visit,\n  visitInParallel,\n  visitWithTypeInfo,\n  Kind,\n  TokenKind,\n  BREAK,\n} from './language';\n\n\n// Execute GraphQL queries.\nexport {\n  execute,\n} from './execution';\n\n\n// Validate GraphQL queries.\nexport {\n  validate,\n  specifiedRules,\n} from './validation';\n\n\n// Create and format GraphQL errors.\nexport {\n  GraphQLError,\n  formatError,\n} from './error';\n\n\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // The GraphQL query recommended for a full schema introspection.\n  introspectionQuery,\n\n  // Gets the target Operation from a Document\n  getOperationAST,\n\n  // Build a GraphQLSchema from an introspection result.\n  buildClientSchema,\n\n  // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema,\n\n  // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema,\n\n  // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n  // language AST.\n  extendSchema,\n\n  // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema,\n\n  // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST,\n\n  // Create a JavaScript value from a GraphQL language AST.\n  valueFromAST,\n\n  // Create a GraphQL language AST from a JavaScript value.\n  astFromValue,\n\n  // A helper to use within recursive-descent visitors which need to be aware of\n  // the GraphQL type system.\n  TypeInfo,\n\n  // Determine if JavaScript values adhere to a GraphQL type.\n  isValidJSValue,\n\n  // Determine if AST values adhere to a GraphQL type.\n  isValidLiteralValue,\n\n  // Concatenates multiple AST together.\n  concatAST,\n\n  // Separates an AST into an AST per Operation.\n  separateOperations,\n\n  // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n\n  // Asserts a string is a valid GraphQL name.\n  assertValidName,\n} from './utilities';\n\n// Export types\nexport type {\n  OperationDefinition,\n  Field,\n  FragmentDefinition,\n  Value,\n  GraphQLType,\n  GraphQLInputType,\n  GraphQLOutputType,\n  GraphQLLeafType,\n  GraphQLCompositeType,\n  GraphQLAbstractType,\n  GraphQLNullableType,\n  GraphQLNamedType,\n  GraphQLScalarTypeConfig,\n  GraphQLObjectTypeConfig,\n  GraphQLTypeResolveFn,\n  GraphQLIsTypeOfFn,\n  GraphQLFieldResolveFn,\n  GraphQLResolveInfo,\n  GraphQLFieldConfig,\n  GraphQLFieldConfigArgumentMap,\n  GraphQLArgumentConfig,\n  GraphQLFieldConfigMap,\n  GraphQLFieldDefinition,\n  GraphQLArgument,\n  GraphQLFieldDefinitionMap,\n  GraphQLInterfaceTypeConfig,\n  GraphQLUnionTypeConfig,\n  GraphQLEnumTypeConfig,\n  GraphQLEnumValueConfigMap,\n  GraphQLEnumValueConfig,\n  GraphQLEnumValueDefinition,\n  InputObjectConfig,\n  InputObjectFieldConfig,\n  InputObjectConfigFieldMap,\n  InputObjectField,\n  InputObjectFieldMap\n} from './type';\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}