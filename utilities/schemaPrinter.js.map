{"version":3,"sources":["utilities/schemaPrinter.js"],"names":[],"mappings":"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","file":"utilities/schemaPrinter.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport type { GraphQLSchema } from '../type/schema';\nimport type { GraphQLType } from '../type/definition';\nimport {\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n} from '../type/definition';\nimport { DEFAULT_DEPRECATION_REASON } from '../type/directives';\n\n\ntype printStyle = 'alphabet' | 'hierarchy';\nexport function printSchema(\n  schema: GraphQLSchema,style: printStyle = 'alphabet'): string {\n  switch (style) {\n    case 'hierarchy':\n      return printFineSchema(schema, n => !isSpecDirective(n));\n    case 'alphabet':\n    default:\n      return printFilteredSchema(schema, n => !isSpecDirective(n),\n      isDefinedType);\n  }\n}\n\nexport function printIntrospectionSchema(schema: GraphQLSchema): string {\n  return printFilteredSchema(schema, isSpecDirective, isIntrospectionType);\n}\n\nfunction isSpecDirective(directiveName: string): boolean {\n  return (\n    directiveName === 'skip' ||\n    directiveName === 'include' ||\n    directiveName === 'deprecated'\n  );\n}\n\nfunction isDefinedType(typename: string): boolean {\n  return !isIntrospectionType(typename) && !isBuiltInScalar(typename);\n}\n\nfunction isIntrospectionType(typename: string): boolean {\n  return typename.indexOf('__') === 0;\n}\n\nfunction isBuiltInScalar(typename: string): boolean {\n  return (\n    typename === 'String' ||\n    typename === 'Boolean' ||\n    typename === 'Int' ||\n    typename === 'Float' ||\n    typename === 'ID'\n  );\n}\n\nfunction printFilteredSchema(\n  schema: GraphQLSchema,\n  directiveFilter: (type: string) => boolean,\n  typeFilter: (type: string) => boolean\n): string {\n  const directives = schema.getDirectives()\n    .filter(directive => directiveFilter(directive.name));\n  const typeMap = schema.getTypeMap();\n  const types = Object.keys(typeMap)\n    .filter(typeFilter)\n    .sort((name1, name2) => name1.localeCompare(name2))\n    .map(typeName => typeMap[typeName]);\n  return [ printSchemaDefinition(schema) ].concat(\n    directives.map(printDirective),\n    types.map(printType)\n  ).join('\\n\\n') + '\\n';\n}\n\nfunction printSchemaDefinition(schema: GraphQLSchema): string {\n  const operationTypes = [];\n\n  const queryType = schema.getQueryType();\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n\nfunction printType(type: GraphQLType): string {\n  if (type instanceof GraphQLScalarType) {\n    return printScalar(type);\n  } else if (type instanceof GraphQLObjectType) {\n    return printObject(type);\n  } else if (type instanceof GraphQLInterfaceType) {\n    return printInterface(type);\n  } else if (type instanceof GraphQLUnionType) {\n    return printUnion(type);\n  } else if (type instanceof GraphQLEnumType) {\n    return printEnum(type);\n  }\n  invariant(type instanceof GraphQLInputObjectType);\n  return printInputObject(type);\n}\n\nfunction printScalar(type: GraphQLScalarType): string {\n  return `scalar ${type.name}`;\n}\n\nfunction printObject(type: GraphQLObjectType): string {\n  const interfaces = type.getInterfaces();\n  const implementedInterfaces = interfaces.length ?\n    ' implements ' + interfaces.map(i => i.name).join(', ') : '';\n  return `type ${type.name}${implementedInterfaces} {\\n` +\n    printFields(type) + '\\n' +\n  '}';\n}\n\nfunction printInterface(type: GraphQLInterfaceType): string {\n  return `interface ${type.name} {\\n` +\n    printFields(type) + '\\n' +\n  '}';\n}\n\nfunction printUnion(type: GraphQLUnionType): string {\n  return `union ${type.name} = ${type.getTypes().join(' | ')}`;\n}\n\nfunction printEnum(type: GraphQLEnumType): string {\n  const values = type.getValues();\n  return `enum ${type.name} {\\n` +\n    values.map(v => '  ' + v.name + printDeprecated(v)).join('\\n') + '\\n' +\n  '}';\n}\n\nfunction printInputObject(type: GraphQLInputObjectType): string {\n  const fieldMap = type.getFields();\n  const fields = Object.keys(fieldMap).map(fieldName => fieldMap[fieldName]);\n  return `input ${type.name} {\\n` +\n    fields.map(f => '  ' + printInputValue(f)).join('\\n') + '\\n' +\n  '}';\n}\n\nfunction printFields(type) {\n  const fieldMap = type.getFields();\n  const fields = Object.keys(fieldMap).map(fieldName => fieldMap[fieldName]);\n  return fields.map(\n    f => '  ' + f.name + printArgs(f) + ': ' +\n      String(f.type) + printDeprecated(f)\n  ).join('\\n');\n}\n\nfunction printDeprecated(fieldOrEnumVal) {\n  const reason = fieldOrEnumVal.deprecationReason;\n  if (isNullish(reason)) {\n    return '';\n  }\n  if (\n    reason === '' ||\n    reason === DEFAULT_DEPRECATION_REASON\n  ) {\n    return ' @deprecated';\n  }\n  return ' @deprecated(reason: ' + print(astFromValue(reason)) + ')';\n}\n\nfunction printArgs(fieldOrDirectives) {\n  if (fieldOrDirectives.args.length === 0) {\n    return '';\n  }\n  return '(' + fieldOrDirectives.args.map(printInputValue).join(', ') + ')';\n}\n\nfunction printInputValue(arg) {\n  let argDecl = arg.name + ': ' + String(arg.type);\n  if (!isNullish(arg.defaultValue)) {\n    argDecl += ` = ${print(astFromValue(arg.defaultValue, arg.type))}`;\n  }\n  return argDecl;\n}\n\nfunction printDirective(directive) {\n  return 'directive @' + directive.name + printArgs(directive) +\n    ' on ' + directive.locations.join(' | ');\n}\n\nfunction printFineSchema(\n  schema: GraphQLSchema,\n  directiveFilter: (type: string) => boolean = (n => !isSpecDirective(n))\n): string {\n  const directives = schema.getDirectives()\n  .filter(directive => directiveFilter(directive.name));\n  const typeMap = schema.getTypeMap();\n  const orderedNames = getOrderedNamesBySchema(schema);\n  const types = orderedNames.map(orderedName => typeMap[orderedName]);\n  return [ directives.map(printDirective) ].concat(\n    types.map(printType),\n    printSchemaDefinition(schema)\n  ).join('\\n\\n') + '\\n';\n}\n\nfunction getOrderedNamesBySchema(schema) {\n  const typeMap = schema.getTypeMap();\n  const rootQuery = schema.getQueryType();\n  const definedTypeNames = Object.keys(typeMap).filter(isDefinedType);\n\n  // use a big number 999999 to save some condition operator ~_~\n  // todo should modify the magic 999999\n  const typeNamesMap = arrayToMap(definedTypeNames,99999);\n  // give each type used by 'Query' a level number\n  const queryMaps = levelTypeNames(rootQuery.name,typeNamesMap,schema);\n  let unLeveledNamesMap = queryMaps.unLeveledNamesMap;\n  const leveledNamesMap = queryMaps.leveledNamesMap;\n  let orderedNames = flatNamesMapToArray(leveledNamesMap);\n\n  const rootMutation = schema.getMutationType();\n  if (rootMutation) {\n    // give level number to the rest unLeveled type\n    // which used by Mutations\n    const restNamesMap = levelTypeNames(rootMutation.name,\n      unLeveledNamesMap,schema);\n    const orderedMutations =\n      flatNamesMapToArray(restNamesMap.leveledNamesMap);\n\n    orderedNames = [ ...orderedNames,...orderedMutations ];\n    unLeveledNamesMap = restNamesMap.unLeveledNamesMap;\n  }\n\n  // todo throw a error .. should have none unknown type\n  const theNamesIDontKnown = flatNamesMapToArray(unLeveledNamesMap);\n  if (theNamesIDontKnown.length > 0) {\n    orderedNames = [ ...theNamesIDontKnown,...orderedNames ];\n  }\n  return orderedNames;\n}\n\nfunction flatNamesMapToArray(leveledNamesMap: Map<*, *>): Array<string> {\n  const levelToNamesMap = flipMap(leveledNamesMap);\n  const nameLevels = Array.from(levelToNamesMap.keys());\n  nameLevels.sort((pre,next) => ( next - pre ));\n  let orderedNames = [];\n  for (const level of nameLevels) {\n    const levelNames = levelToNamesMap.get(level);\n    if (levelNames) {\n      // sort the same level names . to get a certainly order.\n      levelNames.sort((name1, name2) => name1.localeCompare(name2));\n      orderedNames = orderedNames.concat(levelNames);\n    } else {\n      throw new Error(`printFineSchema.getOrderedNamesFromMap:\n      level[${level}] have no names,it should have`);\n    }\n  }\n  return orderedNames;\n}\n\ntype NamesMap = {\n  leveledNamesMap:Map<*, *>,\n  unLeveledNamesMap:Map<*, *>,\n};\n\n// calculate level values for each type names by their reference to each other\nfunction levelTypeNames(rootName: string,namesMapToBeLeveled: Map<*, *>,\n                        schema: GraphQLSchema): NamesMap {\n  const typeMap = schema.getTypeMap();\n  const unLeveledNamesMap = new Map(namesMapToBeLeveled);\n  const leveledNamesMap = new Map();\n  // use a map to watch circle ref,Depth-first search\n  const circleRef = new Map();\n\n  unLeveledNamesMap.delete(rootName);\n  leveledNamesMap.set(rootName,0);\n  _levelTypeNames(rootName,1);\n  function _levelTypeNames(thisName,childLevel) {\n    const childrenNames = getRefedTypes(typeMap[thisName]);\n    for (const childName of childrenNames) {\n      const currentLevel = leveledNamesMap.get(childName);\n      if (// meet a circle ref,skip\n      circleRef.get(childName) ||\n        // this type is not belong to current process,skip\n      namesMapToBeLeveled.get(childName) === undefined ||\n        //  if [the level of leveled Name] >= [current level]\n        // must skip,level is always up~ no downgrade\n      (currentLevel && currentLevel >= childLevel)\n      ) {\n        continue;\n      }\n      circleRef.set(childName,childLevel);\n\n      leveledNamesMap.set(childName,childLevel);\n      unLeveledNamesMap.delete(childName);\n      _levelTypeNames(childName,childLevel + 1);\n\n      circleRef.delete(childName);\n    }\n  }\n\n  return {unLeveledNamesMap,leveledNamesMap};\n}\n\n// always return an array ,if get none,just return []\n// three sources of reference from a type.\n// field itself, args of a fields,interface\nfunction getRefedTypes(type: any): Array<string> {\n  let refedTypeNames = [];\n  if (!isDefinedType(type.name) ||\n      // as i known ~_~,if there is no Fields\n      // this type can not ref other types inside\n    !(type.getFields instanceof Function)\n  ) {\n    return refedTypeNames;\n  }\n\n  const fields = type.getFields();\n  // 1/2 get refed type name from fields\n  Object.keys(fields).map( fieldKey => fields[fieldKey])\n    .filter(field => isDefinedType(getTypeName(field.type) ) )\n    .map(field => {\n      refedTypeNames = refedTypeNames.concat(\n        // 1. get type name from args of a field\n        // in javascript, can not use instanceof to check a String type!\n        // must use typeof!\n        field.args.map(arg => getDefinedTypeNameByType(arg.type))\n          .filter(value => (typeof value === 'string')) ,\n        // 2. get type name from field itself\n        getDefinedTypeNameByType(field.type) || []\n      );\n    });\n\n  // 3. get type name from interfaces\n  if (type.getInterfaces instanceof Function) {\n    for (const interfaceType of type.getInterfaces()) {\n      refedTypeNames.push(interfaceType.name);\n    }\n  }\n  return refedTypeNames;\n\n}\n\nfunction arrayToMap(_array: Array<string>,\n                    defaultValue: number): Map<string, number> {\n  const _map = new Map();\n  for (const v of _array) {\n    _map.set(v,defaultValue);\n  }\n  return _map;\n}\n\nfunction flipMap(_srcMap: Map<string, number>): Map<number, Array<string>> {\n  const _outMap = new Map();\n  for (const [ oldKey,vToKey ] of _srcMap) {\n    const subArray = _outMap.get(vToKey);\n    if ( subArray ) {\n      subArray.push(oldKey);\n    } else {\n      _outMap.set(vToKey,[ oldKey ]);\n    }\n  }\n  return _outMap;\n}\n\nfunction getTypeName(type: any): string {\n  const typeString = type.constructor.name;\n  let name = type.name;\n  if (typeString === 'GraphQLNonNull' || typeString === 'GraphQLList' ) {\n    name = getTypeName(type.ofType);\n  }\n  if ( name === undefined && isDefinedType(type)) {\n    // if still can not get name,\n    // this type must be something i dont known ,throw to learn\n    throw new Error(`Unknown type its javascript class is\n      [ [${type.constructor.name}] ${type.ofType.constructor.name}]`);\n  }\n  return name;\n}\n\nfunction getDefinedTypeNameByType(TypeObj: GraphQLType): ?string {\n  const typeName = getTypeName(TypeObj);\n  if (isDefinedType(typeName)) {\n    return typeName;\n  }\n  return null;\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}