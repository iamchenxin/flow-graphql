{"version":3,"sources":["utilities/isValidLiteralValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;QAqCgB;;AA3BhB;;AAEA;;AAKA;;AAQA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;AAUO,SAAS,mBAAT,CACL,IADK,EAEL,QAFK,EAGO;;AAEZ,MAAI,0CAAJ,EAAoC;AAClC,QAAI,CAAC,QAAD,EAAW;AACb,UAAI,KAAK,MAAL,CAAY,IAAZ,EAAkB;AACpB,eAAO,gBAAe,KAAK,MAAL,CAAY,IAAZ,oBAAf,CAAP,CADoB;OAAtB;AAGA,aAAO,CAAE,sCAAF,CAAP,CAJa;KAAf;AAMA,WAAO,oBAAoB,KAAK,MAAL,EAAa,QAAjC,CAAP,CAPkC;GAApC;;AAUA,MAAI,CAAC,QAAD,EAAW;AACb,WAAO,EAAP,CADa;GAAf;;;;AAZY,MAkBR,SAAS,IAAT,oBAAJ,EAAgC;AAC9B,WAAO,EAAP,CAD8B;GAAhC;;;AAlBY,MAuBR,uCAAJ,EAAiC;;AAC/B,UAAM,WAAW,KAAK,MAAL;AACjB,UAAI,SAAS,IAAT,gBAAJ,EAA4B;AAC1B;aAAO,SAAsB,MAAtB,CAA6B,MAA7B,CAAoC,UAAC,GAAD,EAAM,OAAN,EAAe,KAAf,EAAyB;AAClE,gBAAM,SAAS,oBAAoB,QAApB,EAA8B,OAA9B,CAAT,CAD4D;AAElE,mBAAO,IAAI,MAAJ,CAAW,OAAO,GAAP,CAAW;sCACZ,eAAU;aADE,CAAtB,CAAP,CAFkE;WAAzB,EAKxC,EALI;SAAP,CAD0B;OAA5B;AAQA;WAAO,oBAAoB,QAApB,EAA8B,QAA9B;OAAP;QAV+B;;;GAAjC;;;AAvBY,MAqCR,kDAAJ,EAA4C;;AAC1C,UAAI,SAAS,IAAT,kBAAJ,EAA8B;AAC5B;aAAO,gBAAe,KAAK,IAAL,4BAAf;SAAP,CAD4B;OAA9B;AAGA,UAAM,SAAS,KAAK,SAAL,EAAT;;AAEN,UAAM,SAAS,EAAT;;;AAGN,UAAM,YAAY,SAAwB,MAAxB;AAClB,gBAAU,OAAV,CAAkB,4BAAoB;AACpC,YAAI,CAAC,OAAO,iBAAiB,IAAjB,CAAsB,KAAtB,CAAR,EAAsC;AACxC,iBAAO,IAAP,gBACe,iBAAiB,IAAjB,CAAsB,KAAtB,sBADf,EADwC;SAA1C;OADgB,CAAlB;;;AASA,UAAM,cAAc,sBAAO,SAAP,EAAkB;eAAY,SAAS,IAAT,CAAc,KAAd;OAAZ,CAAhC;AACN,aAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,qBAAa;AACvC,YAAM,SAAS,oBACb,OAAO,SAAP,EAAkB,IAAlB,EACA,YAAY,SAAZ,KAA0B,YAAY,SAAZ,EAAuB,KAAvB,CAFtB,CADiC;AAKvC,eAAO,IAAP,kCAAgB,OAAO,GAAP,CAAW;gCACZ,oBAAe;SADH,EAA3B,EALuC;OAAb,CAA5B;;AAUA;WAAO;OAAP;QA9B0C;;;GAA5C;;AAiCA,2BACE,iDAAqC,2CAArC,EACA,oBAFF;;;;AAtEY,MA6EN,cAAc,KAAK,YAAL,CAAkB,QAAlB,CAAd,CA7EM;AA8EZ,MAAI,yBAAU,WAAV,CAAJ,EAA4B;AAC1B,WAAO,qBAAoB,KAAK,IAAL,iBAAqB,oBAAM,QAAN,OAAzC,CAAP,CAD0B;GAA5B;;AAIA,SAAO,EAAP,CAlFY;CAHP","file":"utilities/isValidLiteralValue.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { print } from '../language/printer';\nimport type { Value, ListValue, ObjectValue } from '../language/ast';\nimport {\n  VARIABLE,\n  LIST,\n  OBJECT\n} from '../language/kinds';\nimport {\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull\n} from '../type/definition';\nimport type { GraphQLInputType } from '../type/definition';\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport isNullish from '../jsutils/isNullish';\n\n\n/**\n * Utility for validators which determines if a value literal AST is valid given\n * an input type.\n *\n * Note that this only validates literal values, variables are assumed to\n * provide values of the correct type.\n */\nexport function isValidLiteralValue(\n  type: GraphQLInputType,\n  valueAST: Value\n): [ string ] {\n  // A value must be provided if the type is non-null.\n  if (type instanceof GraphQLNonNull) {\n    if (!valueAST) {\n      if (type.ofType.name) {\n        return [ `Expected \"${type.ofType.name}!\", found null.` ];\n      }\n      return [ 'Expected non-null value, found null.' ];\n    }\n    return isValidLiteralValue(type.ofType, valueAST);\n  }\n\n  if (!valueAST) {\n    return [];\n  }\n\n  // This function only tests literals, and assumes variables will provide\n  // values of the correct type.\n  if (valueAST.kind === VARIABLE) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    if (valueAST.kind === LIST) {\n      return (valueAST: ListValue).values.reduce((acc, itemAST, index) => {\n        const errors = isValidLiteralValue(itemType, itemAST);\n        return acc.concat(errors.map(error =>\n          `In element #${index}: ${error}`\n        ));\n      }, []);\n    }\n    return isValidLiteralValue(itemType, valueAST);\n  }\n\n  // Input objects check each defined field and look for undefined fields.\n  if (type instanceof GraphQLInputObjectType) {\n    if (valueAST.kind !== OBJECT) {\n      return [ `Expected \"${type.name}\", found not an object.` ];\n    }\n    const fields = type.getFields();\n\n    const errors = [];\n\n    // Ensure every provided field is defined.\n    const fieldASTs = (valueAST: ObjectValue).fields;\n    fieldASTs.forEach(providedFieldAST => {\n      if (!fields[providedFieldAST.name.value]) {\n        errors.push(\n          `In field \"${providedFieldAST.name.value}\": Unknown field.`\n        );\n      }\n    });\n\n    // Ensure every defined field is valid.\n    const fieldASTMap = keyMap(fieldASTs, fieldAST => fieldAST.name.value);\n    Object.keys(fields).forEach(fieldName => {\n      const result = isValidLiteralValue(\n        fields[fieldName].type,\n        fieldASTMap[fieldName] && fieldASTMap[fieldName].value\n      );\n      errors.push(...(result.map(error =>\n        `In field \"${fieldName}\": ${error}`\n      )));\n    });\n\n    return errors;\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must be input type'\n  );\n\n  // Scalar/Enum input checks to ensure the type can parse the value to\n  // a non-null value.\n  const parseResult = type.parseLiteral(valueAST);\n  if (isNullish(parseResult)) {\n    return [ `Expected type \"${type.name}\", found ${print(valueAST)}.` ];\n  }\n\n  return [];\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}