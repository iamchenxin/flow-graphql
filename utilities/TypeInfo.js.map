{"version":3,"sources":["utilities/TypeInfo.js"],"names":[],"mappings":"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","file":"utilities/TypeInfo.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport * as Kind from '../language/kinds';\nimport type { Field } from '../language/ast';\nimport {\n  isCompositeType,\n  getNullableType,\n  getNamedType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLInputObjectType,\n  GraphQLList,\n} from '../type/definition';\nimport type {\n  GraphQLType,\n  GraphQLInputType,\n  GraphQLOutputType,\n  GraphQLCompositeType,\n  GraphQLFieldDefinition,\n  GraphQLArgument\n} from '../type/definition';\nimport type { GraphQLDirective } from '../type/directives';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef\n} from '../type/introspection';\nimport type { GraphQLSchema } from '../type/schema';\nimport type { Node } from '../language/ast';\nimport { typeFromAST } from './typeFromAST';\nimport find from '../jsutils/find';\n\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\nexport class TypeInfo {\n  _schema: GraphQLSchema;\n  _typeStack: Array<?GraphQLOutputType>;\n  _parentTypeStack: Array<?GraphQLCompositeType>;\n  _inputTypeStack: Array<?GraphQLInputType>;\n  _fieldDefStack: Array<?GraphQLFieldDefinition>;\n  _directive: ?GraphQLDirective;\n  _argument: ?GraphQLArgument;\n  _getFieldDef: typeof getFieldDef;\n\n  constructor(\n    schema: GraphQLSchema,\n    // NOTE: this experimental optional second parameter is only needed in order\n    // to support non-spec-compliant codebases. You should never need to use it.\n    // It may disappear in the future.\n    getFieldDefFn?: typeof getFieldDef\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n  }\n\n  getType(): ?GraphQLOutputType {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType(): ?GraphQLCompositeType {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType(): ?GraphQLInputType {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getFieldDef(): ?GraphQLFieldDefinition {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDirective(): ?GraphQLDirective {\n    return this._directive;\n  }\n\n  getArgument(): ?GraphQLArgument {\n    return this._argument;\n  }\n\n  // Flow does not yet handle this case.\n  enter(node: any/* Node */) {\n    const schema = this._schema;\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        const namedType = getNamedType(this.getType());\n        let compositeType: ?GraphQLCompositeType;\n        if (isCompositeType(namedType)) {\n          // isCompositeType is a type refining predicate, so this is safe.\n          compositeType = ((namedType: any): GraphQLCompositeType);\n        }\n        this._parentTypeStack.push(compositeType);\n        break;\n      case Kind.FIELD:\n        const parentType = this.getParentType();\n        let fieldDef;\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n        }\n        this._fieldDefStack.push(fieldDef);\n        this._typeStack.push(fieldDef && fieldDef.type);\n        break;\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n      case Kind.OPERATION_DEFINITION:\n        let type;\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n        this._typeStack.push(type);\n        break;\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST ?\n          typeFromAST(schema, typeConditionAST) :\n          this.getType();\n        this._typeStack.push(((outputType: any): GraphQLOutputType));\n        break;\n      case Kind.VARIABLE_DEFINITION:\n        const inputType = typeFromAST(schema, node.type);\n        this._inputTypeStack.push(((inputType: any): GraphQLInputType));\n        break;\n      case Kind.ARGUMENT:\n        let argDef;\n        let argType;\n        const fieldOrDirective = this.getDirective() || this.getFieldDef();\n        if (fieldOrDirective) {\n          argDef = find(\n            fieldOrDirective.args,\n            arg => arg.name === node.name.value\n          );\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n        this._argument = argDef;\n        this._inputTypeStack.push(argType);\n        break;\n      case Kind.LIST:\n        const listType = getNullableType(this.getInputType());\n        this._inputTypeStack.push(\n          listType instanceof GraphQLList ? listType.ofType : undefined\n        );\n        break;\n      case Kind.OBJECT_FIELD:\n        const objectType = getNamedType(this.getInputType());\n        let fieldType;\n        if (objectType instanceof GraphQLInputObjectType) {\n          const inputField = objectType.getFields()[node.name.value];\n          fieldType = inputField ? inputField.type : undefined;\n        }\n        this._inputTypeStack.push(fieldType);\n        break;\n    }\n  }\n\n  leave(node: Node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n        break;\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n        this._typeStack.pop();\n        break;\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n        break;\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n        break;\n      case Kind.ARGUMENT:\n        this._argument = null;\n        this._inputTypeStack.pop();\n        break;\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n        break;\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(\n  schema: GraphQLSchema,\n  parentType: GraphQLType,\n  fieldAST: Field\n): ?GraphQLFieldDefinition {\n  const name = fieldAST.name.value;\n  if (name === SchemaMetaFieldDef.name &&\n      schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n  if (name === TypeMetaFieldDef.name &&\n      schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n  if (name === TypeNameMetaFieldDef.name &&\n      (parentType instanceof GraphQLObjectType ||\n       parentType instanceof GraphQLInterfaceType ||\n       parentType instanceof GraphQLUnionType)\n  ) {\n    return TypeNameMetaFieldDef;\n  }\n  if (parentType instanceof GraphQLObjectType ||\n      parentType instanceof GraphQLInterfaceType) {\n    return parentType.getFields()[name];\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}