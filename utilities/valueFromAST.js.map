{"version":3,"sources":["utilities/valueFromAST.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;QA6CgB;;AAnChB;;;;AACA;;;;AACA;;;;AACA;;IAAY;;AACZ;;;;;;;;;;;;;;;;;;;;;AA+BO,SAAS,YAAT,CACL,QADK,EAEL,IAFK,EAGL,SAHK,EAIE;AACP,MAAI,0CAAJ,EAAoC;;;;AAIlC,WAAO,aAAa,QAAb,EAAuB,KAAK,MAAL,EAAa,SAApC,CAAP,CAJkC;GAApC;;AAOA,MAAI,CAAC,QAAD,EAAW;AACb,WAAO,IAAP,CADa;GAAf;;AAIA,MAAI,SAAS,IAAT,KAAkB,KAAK,QAAL,EAAe;AACnC,QAAM,eAAe,SAAqB,IAArB,CAA0B,KAA1B,CADc;AAEnC,QAAI,CAAC,SAAD,IAAc,CAAC,UAAU,cAAV,CAAyB,YAAzB,CAAD,EAAyC;AACzD,aAAO,IAAP,CADyD;KAA3D;;;;AAFmC,WAQ5B,UAAU,YAAV,CAAP,CARmC;GAArC;;AAWA,MAAI,uCAAJ,EAAiC;;AAC/B,UAAM,WAAW,KAAK,MAAL;AACjB,UAAI,SAAS,IAAT,KAAkB,KAAK,IAAL,EAAW;AAC/B;aAAO,SAAsB,MAAtB,CAA6B,GAA7B,CACL;mBAAW,aAAa,OAAb,EAAsB,QAAtB,EAAgC,SAAhC;WAAX;SADF,CAD+B;OAAjC;AAKA;WAAO,CAAE,aAAa,QAAb,EAAuB,QAAvB,EAAiC,SAAjC,CAAF;OAAP;QAP+B;;;GAAjC;;AAUA,MAAI,kDAAJ,EAA4C;;AAC1C,UAAM,SAAS,KAAK,SAAL,EAAT;AACN,UAAI,SAAS,IAAT,KAAkB,KAAK,MAAL,EAAa;AACjC;aAAO;SAAP,CADiC;OAAnC;AAGA,UAAM,YAAY,sBAChB,SAAwB,MAAxB,EACA;eAAS,MAAM,IAAN,CAAW,KAAX;OAAT,CAFI;AAIN;WAAO,OAAO,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,UAAC,GAAD,EAAM,SAAN,EAAoB;AACpD,cAAM,QAAQ,OAAO,SAAP,CAAR,CAD8C;AAEpD,cAAM,WAAW,UAAU,SAAV,CAAX,CAF8C;AAGpD,cAAI,aACF,aAAa,YAAY,SAAS,KAAT,EAAgB,MAAM,IAAN,EAAY,SAArD,CADE,CAHgD;AAKpD,cAAI,yBAAU,UAAV,CAAJ,EAA2B;AACzB,yBAAa,MAAM,YAAN,CADY;WAA3B;AAGA,cAAI,CAAC,yBAAU,UAAV,CAAD,EAAwB;AAC1B,gBAAI,SAAJ,IAAiB,UAAjB,CAD0B;WAA5B;AAGA,iBAAO,GAAP,CAXoD;SAApB,EAY/B,EAZI;OAAP;QAT0C;;;GAA5C;;AAwBA,2BACE,iDAAqC,2CAArC,EACA,oBAFF,EAzDO;;AA8DP,MAAM,SAAS,KAAK,YAAL,CAAkB,QAAlB,CAAT,CA9DC;AA+DP,MAAI,CAAC,yBAAU,MAAV,CAAD,EAAoB;AACtB,WAAO,MAAP,CADsB;GAAxB;CAnEK","file":"utilities/valueFromAST.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport keyMap from '../jsutils/keyMap';\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport * as Kind from '../language/kinds';\nimport {\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport type { GraphQLInputType } from '../type/definition';\nimport type {\n  Value,\n  Variable,\n  ListValue,\n  ObjectValue\n} from '../language/ast';\n\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String / Enum Value  | String        |\n * | Int / Float          | Number        |\n *\n */\nexport function valueFromAST(\n  valueAST: ?Value,\n  type: GraphQLInputType,\n  variables?: ?{ [key: string]: mixed }\n): mixed {\n  if (type instanceof GraphQLNonNull) {\n    // Note: we're not checking that the result of valueFromAST is non-null.\n    // We're assuming that this query has been validated and the value used\n    // here is of the correct type.\n    return valueFromAST(valueAST, type.ofType, variables);\n  }\n\n  if (!valueAST) {\n    return null;\n  }\n\n  if (valueAST.kind === Kind.VARIABLE) {\n    const variableName = (valueAST: Variable).name.value;\n    if (!variables || !variables.hasOwnProperty(variableName)) {\n      return null;\n    }\n    // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n    return variables[variableName];\n  }\n\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    if (valueAST.kind === Kind.LIST) {\n      return (valueAST: ListValue).values.map(\n        itemAST => valueFromAST(itemAST, itemType, variables)\n      );\n    }\n    return [ valueFromAST(valueAST, itemType, variables) ];\n  }\n\n  if (type instanceof GraphQLInputObjectType) {\n    const fields = type.getFields();\n    if (valueAST.kind !== Kind.OBJECT) {\n      return null;\n    }\n    const fieldASTs = keyMap(\n      (valueAST: ObjectValue).fields,\n      field => field.name.value\n    );\n    return Object.keys(fields).reduce((obj, fieldName) => {\n      const field = fields[fieldName];\n      const fieldAST = fieldASTs[fieldName];\n      let fieldValue =\n        valueFromAST(fieldAST && fieldAST.value, field.type, variables);\n      if (isNullish(fieldValue)) {\n        fieldValue = field.defaultValue;\n      }\n      if (!isNullish(fieldValue)) {\n        obj[fieldName] = fieldValue;\n      }\n      return obj;\n    }, {});\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must be input type'\n  );\n\n  const parsed = type.parseLiteral(valueAST);\n  if (!isNullish(parsed)) {\n    return parsed;\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}