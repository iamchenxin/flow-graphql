{"version":3,"sources":["utilities/index.js"],"names":[],"mappings":";;;;;;;;;;;+BAWS;;;;;;;;;4BAGA;;;;;;;;;8BAGA;;;;;;;;;2BAGA;;;;;;;;;yBAGA;;;;;;;;;0BAGA;;;;;;0BAAa;;;;;;;;;wBAGb;;;;;;;;;yBAGA;;;;;;;;;yBAGA;;;;;;;;;qBAIA;;;;;;;;;2BAGA;;;;;;;;;gCAGA;;;;;;;;;sBAGA;;;;;;;;;4BAIP;;;;;;4BACA;;;;;;4BACA;;;;;;;;;4BAIO","file":"utilities/index.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n// The GraphQL query recommended for a full schema introspection.\nexport { introspectionQuery } from './introspectionQuery';\n\n// Gets the target Operation from a Document\nexport { getOperationAST } from './getOperationAST';\n\n// Build a GraphQLSchema from an introspection result.\nexport { buildClientSchema } from './buildClientSchema';\n\n// Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { buildASTSchema } from './buildASTSchema';\n\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema';\n\n// Print a GraphQLSchema to GraphQL Schema language.\nexport { printSchema, printIntrospectionSchema } from './schemaPrinter';\n\n// Create a GraphQLType from a GraphQL language AST.\nexport { typeFromAST } from './typeFromAST';\n\n// Create a JavaScript value from a GraphQL language AST.\nexport { valueFromAST } from './valueFromAST';\n\n// Create a GraphQL language AST from a JavaScript value.\nexport { astFromValue } from './astFromValue';\n\n// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nexport { TypeInfo } from './TypeInfo';\n\n// Determine if JavaScript values adhere to a GraphQL type.\nexport { isValidJSValue } from './isValidJSValue';\n\n// Determine if AST values adhere to a GraphQL type.\nexport { isValidLiteralValue } from './isValidLiteralValue';\n\n// Concatenates multiple AST together.\nexport { concatAST } from './concatAST';\n\n// Comparators for types\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap\n} from './typeComparators';\n\n// Asserts that a string is a valid GraphQL name\nexport { assertValidName } from './assertValidName';\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}