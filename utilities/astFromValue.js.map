{"version":3,"sources":["utilities/astFromValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;QA8DgB;;AApDhB;;AAEA;;;;AACA;;;;AAWA;;AAYA;;AAOA;;;;;;;;;;;;;;;;;;;;AAmBO,SAAS,YAAT,CACL,KADK,EAEL,IAFK,EAGG;;AAER,MAAM,SAAS,KAAT,CAFE;;AAIR,MAAI,0CAAJ,EAAoC;;;AAGlC,WAAO,aAAa,MAAb,EAAqB,KAAK,MAAL,CAA5B,CAHkC;GAApC;;AAMA,MAAI,yBAAU,MAAV,CAAJ,EAAuB;AACrB,WAAO,IAAP,CADqB;GAAvB;;;;AAVQ,MAgBJ,uCAAJ,EAAiC;;AAC/B,UAAM,WAAW,KAAK,MAAL;AACjB,UAAI,2BAAa,MAAb,CAAJ,EAA0B;;AACxB,cAAM,aAAa,EAAb;AACN,gCAAS,MAAT,EAAuB,gBAAQ;AAC7B,gBAAM,UAAU,aAAa,IAAb,EAAmB,QAAnB,CAAV,CADuB;AAE7B,gBAAI,OAAJ,EAAa;AACX,yBAAW,IAAX,CAAgB,OAAhB,EADW;aAAb;WAFqB,CAAvB;AAMA;;iBAAQ,EAAE,iBAAF,EAAc,QAAQ,UAAR;;WAAtB;YARwB;;;OAA1B;AAUA;WAAO,aAAa,MAAb,EAAqB,QAArB;OAAP;QAZ+B;;;GAAjC;;;;AAhBQ,MAiCJ,kDAAJ,EAA4C;;AAC1C,UAAI,WAAW,IAAX,IAAmB,QAAO,uDAAP,KAAkB,QAAlB,EAA4B;AACjD;aAAO;SAAP,CADiD;OAAnD;AAGA,UAAM,SAAS,KAAK,SAAL,EAAT;AACN,UAAM,YAAY,EAAZ;AACN,aAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,qBAAa;AACvC,YAAM,YAAY,OAAO,SAAP,EAAkB,IAAlB,CADqB;AAEvC,YAAM,aAAa,aAAa,OAAO,SAAP,CAAb,EAAgC,SAAhC,CAAb,CAFiC;AAGvC,YAAI,UAAJ,EAAgB;AACd,oBAAU,IAAV,CAAe;AACb,qCADa;AAEb,kBAAM,EAAE,iBAAF,EAAc,OAAO,SAAP,EAApB;AACA,mBAAO,UAAP;WAHF,EADc;SAAhB;OAH0B,CAA5B;AAWA;WAAQ,EAAE,mBAAF,EAAgB,QAAQ,SAAR;OAAxB;QAjB0C;;;GAA5C;;AAoBA,2BACE,iDAAqC,2CAArC,EACA,0CAA0C,OAAO,IAAP,CAA1C,CAFF;;;;AArDQ,MA4DF,aAAa,KAAK,SAAL,CAAe,MAAf,CAAb,CA5DE;AA6DR,MAAI,yBAAU,UAAV,CAAJ,EAA2B;AACzB,WAAO,IAAP,CADyB;GAA3B;;;AA7DQ,MAkEJ,OAAO,UAAP,KAAsB,SAAtB,EAAiC;AACnC,WAAQ,EAAE,oBAAF,EAAiB,OAAO,UAAP,EAAzB,CADmC;GAArC;;;AAlEQ,MAuEJ,OAAO,UAAP,KAAsB,QAAtB,EAAgC;AAClC,QAAM,YAAY,OAAO,UAAP,CAAZ,CAD4B;AAElC,WAAO,YAAW,IAAX,CAAgB,SAAhB,IACJ,EAAE,gBAAF,EAAa,OAAO,SAAP,EADT,GAEJ,EAAE,kBAAF,EAAe,OAAO,SAAP,EAFX;MAF2B;GAApC;;AAOA,MAAI,OAAO,UAAP,KAAsB,QAAtB,EAAgC;;AAElC,QAAI,2CAAJ,EAAqC;AACnC,aAAQ,EAAE,iBAAF,EAAc,OAAO,UAAP,EAAtB,CADmC;KAArC;;;AAFkC,QAO9B,+BAAsB,WAAW,IAAX,CAAgB,UAAhB,CAAtB,EAAmD;AACrD,aAAQ,EAAE,gBAAF,EAAa,OAAO,UAAP,EAArB,CADqD;KAAvD;;;;AAPkC,WAa1B;AACN,yBADM;AAEN,aAAO,KAAK,SAAL,CAAe,UAAf,EAA2B,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAAD,CAA3C;KAFF,CAbkC;GAApC;;AAmBA,QAAM,IAAI,SAAJ,CAAc,kCAAkC,OAAO,UAAP,CAAlC,CAApB,CAjGQ;CAHH","file":"utilities/astFromValue.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { forEach, isCollection } from 'iterall';\n\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport type {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  BooleanValue,\n  EnumValue,\n  ListValue,\n  ObjectValue,\n} from '../language/ast';\nimport {\n  NAME,\n  INT,\n  FLOAT,\n  STRING,\n  BOOLEAN,\n  ENUM,\n  LIST,\n  OBJECT,\n  OBJECT_FIELD,\n} from '../language/kinds';\nimport type { GraphQLInputType } from '../type/definition';\nimport {\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n *\n */\nexport function astFromValue(\n  value: mixed,\n  type: GraphQLInputType\n): ?Value {\n  // Ensure flow knows that we treat function params as const.\n  const _value = value;\n\n  if (type instanceof GraphQLNonNull) {\n    // Note: we're not checking that the result is non-null.\n    // This function is not responsible for validating the input value.\n    return astFromValue(_value, type.ofType);\n  }\n\n  if (isNullish(_value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    if (isCollection(_value)) {\n      const valuesASTs = [];\n      forEach((_value: any), item => {\n        const itemAST = astFromValue(item, itemType);\n        if (itemAST) {\n          valuesASTs.push(itemAST);\n        }\n      });\n      return ({ kind: LIST, values: valuesASTs }: ListValue);\n    }\n    return astFromValue(_value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if (type instanceof GraphQLInputObjectType) {\n    if (_value === null || typeof _value !== 'object') {\n      return null;\n    }\n    const fields = type.getFields();\n    const fieldASTs = [];\n    Object.keys(fields).forEach(fieldName => {\n      const fieldType = fields[fieldName].type;\n      const fieldValue = astFromValue(_value[fieldName], fieldType);\n      if (fieldValue) {\n        fieldASTs.push({\n          kind: OBJECT_FIELD,\n          name: { kind: NAME, value: fieldName },\n          value: fieldValue\n        });\n      }\n    });\n    return ({ kind: OBJECT, fields: fieldASTs }: ObjectValue);\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must provide Input Type, cannot use: ' + String(type)\n  );\n\n  // Since value is an internally represented value, it must be serialized\n  // to an externally represented value before converting into an AST.\n  const serialized = type.serialize(_value);\n  if (isNullish(serialized)) {\n    return null;\n  }\n\n  // Others serialize based on their corresponding JavaScript scalar types.\n  if (typeof serialized === 'boolean') {\n    return ({ kind: BOOLEAN, value: serialized }: BooleanValue);\n  }\n\n  // JavaScript numbers can be Int or Float values.\n  if (typeof serialized === 'number') {\n    const stringNum = String(serialized);\n    return /^[0-9]+$/.test(stringNum) ?\n      ({ kind: INT, value: stringNum }: IntValue) :\n      ({ kind: FLOAT, value: stringNum }: FloatValue);\n  }\n\n  if (typeof serialized === 'string') {\n    // Enum types use Enum literals.\n    if (type instanceof GraphQLEnumType) {\n      return ({ kind: ENUM, value: serialized }: EnumValue);\n    }\n\n    // ID types can use Int literals.\n    if (type === GraphQLID && /^[0-9]+$/.test(serialized)) {\n      return ({ kind: INT, value: serialized }: IntValue);\n    }\n\n    // Use JSON stringify, which uses the same string encoding as GraphQL,\n    // then remove the quotes.\n    return ({\n      kind: STRING,\n      value: JSON.stringify(serialized).slice(1, -1)\n    }: StringValue);\n  }\n\n  throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}