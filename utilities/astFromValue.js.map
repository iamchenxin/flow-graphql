{"version":3,"sources":["utilities/astFromValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;QA0DgB;;AAhDhB;;;;AACA;;;;AAWA;;AAYA;;AAMA;;;;;;;;;;;;;;;;;;;AAkBO,SAAS,YAAT,CACL,KADK,EAEL,IAFK,EAGG;;AAER,MAAM,SAAS,KAAT,CAFE;;AAIR,MAAI,0CAAJ,EAAoC;;;AAGlC,WAAO,aAAa,MAAb,EAAqB,KAAK,MAAL,CAA5B,CAHkC;GAApC;;AAMA,MAAI,yBAAU,MAAV,CAAJ,EAAuB;AACrB,WAAO,IAAP,CADqB;GAAvB;;;;AAVQ,MAgBJ,MAAM,OAAN,CAAc,MAAd,CAAJ,EAA2B;;AACzB,UAAM,WAAW,0CAA8B,KAAK,MAAL,GAAc,IAA5C;AACjB;WAAQ;AACN,2BADM;AAEN,kBAAQ,OAAO,GAAP,CAAW,gBAAQ;AACzB,gBAAM,YAAY,aAAa,IAAb,EAAmB,QAAnB,CAAZ,CADmB;AAEzB,qCAAU,SAAV,EAAqB,4BAArB,EAFyB;AAGzB,mBAAO,SAAP,CAHyB;WAAR,CAAnB;;OAFF;QAFyB;;;GAA3B,MAUO,IAAI,uCAAJ,EAAiC;;;;AAItC,WAAO,aAAa,MAAb,EAAqB,KAAK,MAAL,CAA5B,CAJsC;GAAjC;;AAOP,MAAI,OAAO,MAAP,KAAkB,SAAlB,EAA6B;AAC/B,WAAQ,EAAE,oBAAF,EAAiB,OAAO,MAAP,EAAzB,CAD+B;GAAjC;;;;;AAjCQ,MAwCJ,OAAO,MAAP,KAAkB,QAAlB,EAA4B;AAC9B,QAAM,YAAY,OAAO,MAAP,CAAZ,CADwB;AAE9B,QAAM,aAAa,WAAW,IAAX,CAAgB,SAAhB,CAAb,CAFwB;AAG9B,QAAI,UAAJ,EAAgB;AACd,UAAI,8BAAJ,EAA2B;AACzB,eAAQ,EAAE,kBAAF,EAAe,OAAO,YAAY,IAAZ,EAA9B,CADyB;OAA3B;AAGA,aAAQ,EAAE,gBAAF,EAAa,OAAO,SAAP,EAArB,CAJc;KAAhB;AAMA,WAAQ,EAAE,kBAAF,EAAe,OAAO,SAAP,EAAvB,CAT8B;GAAhC;;;;AAxCQ,MAsDJ,OAAO,MAAP,KAAkB,QAAlB,EAA4B;AAC9B,QAAI,+CACA,2BAA2B,IAA3B,CAAgC,MAAhC,CADA,EACyC;AAC3C,aAAQ,EAAE,iBAAF,EAAc,OAAO,MAAP,EAAtB,CAD2C;KAD7C;;;AAD8B,WAOtB;AACN,yBADM;AAEN,aAAO,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAvB,CAA6B,CAA7B,EAAgC,CAAC,CAAD,CAAvC;KAFF,CAP8B;GAAhC;;;AAtDQ,0BAoER,CAAU,QAAO,uDAAP,KAAkB,QAAlB,IAA8B,WAAW,IAAX,CAAxC;;;;AApEQ,MAwEF,SAAS,EAAT,CAxEE;AAyER,SAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,qBAAa;AACvC,QAAI,qBAAJ,CADuC;AAEvC,QAAI,kDAAJ,EAA4C;AAC1C,UAAM,WAAW,KAAK,SAAL,GAAiB,SAAjB,CAAX,CADoC;AAE1C,kBAAY,YAAY,SAAS,IAAT,CAFkB;KAA5C;AAIA,QAAM,aAAa,aAAa,OAAO,SAAP,CAAb,EAAgC,SAAhC,CAAb,CANiC;AAOvC,QAAI,UAAJ,EAAgB;AACd,aAAO,IAAP,CAAY;AACV,iCADU;AAEV,cAAM,EAAE,iBAAF,EAAc,OAAO,SAAP,EAApB;AACA,eAAO,UAAP;OAHF,EADc;KAAhB;GAP0B,CAA5B,CAzEQ;AAwFR,SAAQ,EAAE,mBAAF,EAAgB,cAAhB,EAAR,CAxFQ;CAHH","file":"utilities/astFromValue.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport type {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  BooleanValue,\n  EnumValue,\n  ListValue,\n  ObjectValue,\n} from '../language/ast';\nimport {\n  NAME,\n  INT,\n  FLOAT,\n  STRING,\n  BOOLEAN,\n  ENUM,\n  LIST,\n  OBJECT,\n  OBJECT_FIELD,\n} from '../language/kinds';\nimport type { GraphQLType } from '../type/definition';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport { GraphQLFloat } from '../type/scalars';\n\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * Optionally, a GraphQL type may be provided, which will be used to\n * disambiguate between value primitives.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n *\n */\nexport function astFromValue(\n  value: mixed,\n  type?: ?GraphQLType\n): ?Value {\n  // Ensure flow knows that we treat function params as const.\n  const _value = value;\n\n  if (type instanceof GraphQLNonNull) {\n    // Note: we're not checking that the result is non-null.\n    // This function is not responsible for validating the input value.\n    return astFromValue(_value, type.ofType);\n  }\n\n  if (isNullish(_value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (Array.isArray(_value)) {\n    const itemType = type instanceof GraphQLList ? type.ofType : null;\n    return ({\n      kind: LIST,\n      values: _value.map(item => {\n        const itemValue = astFromValue(item, itemType);\n        invariant(itemValue, 'Could not create AST item.');\n        return itemValue;\n      })\n    }: ListValue);\n  } else if (type instanceof GraphQLList) {\n    // Because GraphQL will accept single values as a \"list of one\" when\n    // expecting a list, if there's a non-array value and an expected list type,\n    // create an AST using the list's item type.\n    return astFromValue(_value, type.ofType);\n  }\n\n  if (typeof _value === 'boolean') {\n    return ({ kind: BOOLEAN, value: _value }: BooleanValue);\n  }\n\n  // JavaScript numbers can be Float or Int values. Use the GraphQLType to\n  // differentiate if available, otherwise prefer Int if the value is a\n  // valid Int.\n  if (typeof _value === 'number') {\n    const stringNum = String(_value);\n    const isIntValue = /^[0-9]+$/.test(stringNum);\n    if (isIntValue) {\n      if (type === GraphQLFloat) {\n        return ({ kind: FLOAT, value: stringNum + '.0' }: FloatValue);\n      }\n      return ({ kind: INT, value: stringNum }: IntValue);\n    }\n    return ({ kind: FLOAT, value: stringNum }: FloatValue);\n  }\n\n  // JavaScript strings can be Enum values or String values. Use the\n  // GraphQLType to differentiate if possible.\n  if (typeof _value === 'string') {\n    if (type instanceof GraphQLEnumType &&\n        /^[_a-zA-Z][_a-zA-Z0-9]*$/.test(_value)) {\n      return ({ kind: ENUM, value: _value }: EnumValue);\n    }\n    // Use JSON stringify, which uses the same string encoding as GraphQL,\n    // then remove the quotes.\n    return ({\n      kind: STRING,\n      value: JSON.stringify(_value).slice(1, -1)\n    }: StringValue);\n  }\n\n  // last remaining possible typeof\n  invariant(typeof _value === 'object' && _value !== null);\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object.\n  const fields = [];\n  Object.keys(_value).forEach(fieldName => {\n    let fieldType;\n    if (type instanceof GraphQLInputObjectType) {\n      const fieldDef = type.getFields()[fieldName];\n      fieldType = fieldDef && fieldDef.type;\n    }\n    const fieldValue = astFromValue(_value[fieldName], fieldType);\n    if (fieldValue) {\n      fields.push({\n        kind: OBJECT_FIELD,\n        name: { kind: NAME, value: fieldName },\n        value: fieldValue\n      });\n    }\n  });\n  return ({ kind: OBJECT, fields }: ObjectValue);\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}