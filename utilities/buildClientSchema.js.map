{"version":3,"sources":["utilities/buildClientSchema.js"],"names":[],"mappings":"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","file":"utilities/buildClientSchema.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport { valueFromAST } from './valueFromAST';\nimport { parseValue } from '../language/parser';\nimport { GraphQLSchema } from '../type/schema';\n\nimport {\n  isInputType,\n  isOutputType,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\n\nimport {\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n} from '../type/introspection';\n\nimport {\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID\n} from '../type/scalars';\n\nimport { DirectiveLocation, GraphQLDirective } from '../type/directives';\n\nimport { TypeKind } from '../type/introspection';\n\nimport type {\n  GraphQLType,\n  GraphQLInputType,\n  GraphQLOutputType,\n  GraphQLNamedType,\n} from '../type/definition';\n\nimport type {\n  IntrospectionQuery,\n  IntrospectionType,\n  IntrospectionScalarType,\n  IntrospectionObjectType,\n  IntrospectionInterfaceType,\n  IntrospectionUnionType,\n  IntrospectionEnumType,\n  IntrospectionInputObjectType,\n  IntrospectionTypeRef,\n  IntrospectionListTypeRef,\n  IntrospectionNonNullTypeRef,\n} from './introspectionQuery';\n\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n */\nexport function buildClientSchema(\n  introspection: IntrospectionQuery\n): GraphQLSchema {\n\n  // Get the schema from the introspection result.\n  const schemaIntrospection = introspection.__schema;\n\n  // Converts the list of types into a keyMap based on the type names.\n  const typeIntrospectionMap = keyMap(\n    schemaIntrospection.types,\n    type => type.name\n  );\n\n  // A cache to use to store the actual GraphQLType definition objects by name.\n  // Initialize to the GraphQL built in scalars. All functions below are inline\n  // so that this type def cache is within the scope of the closure.\n  const typeDefCache = {\n    String: GraphQLString,\n    Int: GraphQLInt,\n    Float: GraphQLFloat,\n    Boolean: GraphQLBoolean,\n    ID: GraphQLID,\n    __Schema,\n    __Directive,\n    __DirectiveLocation,\n    __Type,\n    __Field,\n    __InputValue,\n    __EnumValue,\n    __TypeKind,\n  };\n\n  // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n  function getType(typeRef: IntrospectionTypeRef): GraphQLType {\n    if (typeRef.kind === TypeKind.LIST) {\n      const itemRef = ((typeRef: any): IntrospectionListTypeRef).ofType;\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      return new GraphQLList(getType(itemRef));\n    }\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      const nullableRef = ((typeRef: any): IntrospectionNonNullTypeRef).ofType;\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      const nullableType = getType(nullableRef);\n      invariant(\n        !(nullableType instanceof GraphQLNonNull),\n        'No nesting nonnull.'\n      );\n      return new GraphQLNonNull(nullableType);\n    }\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName: string): GraphQLNamedType {\n    if (typeDefCache[typeName]) {\n      return typeDefCache[typeName];\n    }\n    const typeIntrospection = typeIntrospectionMap[typeName];\n    if (!typeIntrospection) {\n      throw new Error(\n        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure ` +\n        'that a full introspection query is used in order to build a ' +\n        'client schema.'\n      );\n    }\n    const typeDef = buildType(typeIntrospection);\n    typeDefCache[typeName] = typeDef;\n    return typeDef;\n  }\n\n  function getInputType(typeRef: IntrospectionTypeRef): GraphQLInputType {\n    const type = getType(typeRef);\n    invariant(\n      isInputType(type),\n      'Introspection must provide input type for arguments.'\n    );\n    return (type: any);\n  }\n\n  function getOutputType(typeRef: IntrospectionTypeRef): GraphQLOutputType {\n    const type = getType(typeRef);\n    invariant(\n      isOutputType(type),\n      'Introspection must provide output type for fields.'\n    );\n    return (type: any);\n  }\n\n  function getObjectType(typeRef: IntrospectionTypeRef): GraphQLObjectType {\n    const type = getType(typeRef);\n    invariant(\n      type instanceof GraphQLObjectType,\n      'Introspection must provide object type for possibleTypes.'\n    );\n    return (type: any);\n  }\n\n  function getInterfaceType(\n    typeRef: IntrospectionTypeRef\n  ): GraphQLInterfaceType {\n    const type = getType(typeRef);\n    invariant(\n      type instanceof GraphQLInterfaceType,\n      'Introspection must provide interface type for interfaces.'\n    );\n    return (type: any);\n  }\n\n\n  // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n  function buildType(type: IntrospectionType): GraphQLNamedType {\n    switch (type.kind) {\n      case TypeKind.SCALAR:\n        return buildScalarDef(type);\n      case TypeKind.OBJECT:\n        return buildObjectDef(type);\n      case TypeKind.INTERFACE:\n        return buildInterfaceDef(type);\n      case TypeKind.UNION:\n        return buildUnionDef(type);\n      case TypeKind.ENUM:\n        return buildEnumDef(type);\n      case TypeKind.INPUT_OBJECT:\n        return buildInputObjectDef(type);\n      default:\n        throw new Error(\n          `Invalid or incomplete schema, unknown kind: ${type.kind}. Ensure ` +\n          'that a full introspection query is used in order to build a ' +\n          'client schema.'\n        );\n    }\n  }\n\n  function buildScalarDef(\n    scalarIntrospection: IntrospectionScalarType\n  ): GraphQLScalarType {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      serialize: id => id,\n      // Note: validation calls the parse functions to determine if a\n      // literal value is correct. Returning null would cause use of custom\n      // scalars to always fail validation. Returning false causes them to\n      // always pass validation.\n      parseValue: () => false,\n      parseLiteral: () => false,\n    });\n  }\n\n  function buildObjectDef(\n    objectIntrospection: IntrospectionObjectType\n  ): GraphQLObjectType {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: objectIntrospection.interfaces.map(getInterfaceType),\n      fields: () => buildFieldDefMap(objectIntrospection),\n    });\n  }\n\n  function buildInterfaceDef(\n    interfaceIntrospection: IntrospectionInterfaceType\n  ): GraphQLInterfaceType {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: () => buildFieldDefMap(interfaceIntrospection),\n      resolveType: cannotExecuteClientSchema,\n    });\n  }\n\n  function buildUnionDef(\n    unionIntrospection: IntrospectionUnionType\n  ): GraphQLUnionType {\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: unionIntrospection.possibleTypes.map(getObjectType),\n      resolveType: cannotExecuteClientSchema,\n    });\n  }\n\n  function buildEnumDef(\n    enumIntrospection: IntrospectionEnumType\n  ): GraphQLEnumType {\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(\n        enumIntrospection.enumValues,\n        valueIntrospection => valueIntrospection.name,\n        valueIntrospection => ({\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason,\n        })\n      )\n    });\n  }\n\n  function buildInputObjectDef(\n    inputObjectIntrospection: IntrospectionInputObjectType\n  ): GraphQLInputObjectType {\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    return keyValMap(\n      typeIntrospection.fields,\n      fieldIntrospection => fieldIntrospection.name,\n      fieldIntrospection => ({\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args),\n      })\n    );\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(\n      inputValueIntrospections,\n      inputValue => inputValue.name,\n      buildInputValue\n    );\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getInputType(inputValueIntrospection.type);\n    const defaultValue = inputValueIntrospection.defaultValue ?\n      valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) :\n      null;\n    return {\n      name: inputValueIntrospection.name,\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    // Support deprecated `on****` fields for building `locations`, as this\n    // is used by GraphiQL which may need to support outdated servers.\n    const locations = directiveIntrospection.locations ?\n      directiveIntrospection.locations.slice() :\n      [].concat(\n        !directiveIntrospection.onField ? [] : [\n          DirectiveLocation.FIELD,\n        ],\n        !directiveIntrospection.onOperation ? [] : [\n          DirectiveLocation.QUERY,\n          DirectiveLocation.MUTATION,\n          DirectiveLocation.SUBSCRIPTION,\n        ],\n        !directiveIntrospection.onFragment ? [] : [\n          DirectiveLocation.FRAGMENT_DEFINITION,\n          DirectiveLocation.FRAGMENT_SPREAD,\n          DirectiveLocation.INLINE_FRAGMENT,\n        ]\n      );\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations,\n      args: buildInputValueDefMap(directiveIntrospection.args),\n    });\n  }\n\n  // Iterate through all types, getting the type definition for each, ensuring\n  // that any type not directly referenced by a field will get created.\n  const types = schemaIntrospection.types.map(\n    typeIntrospection => getNamedType(typeIntrospection.name)\n  );\n\n  // Get the root Query, Mutation, and Subscription types.\n  const queryType = getObjectType(schemaIntrospection.queryType);\n\n  const mutationType = schemaIntrospection.mutationType ?\n    getObjectType(schemaIntrospection.mutationType) :\n    null;\n\n  const subscriptionType = schemaIntrospection.subscriptionType ?\n    getObjectType(schemaIntrospection.subscriptionType) :\n    null;\n\n  // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n  const directives = schemaIntrospection.directives ?\n    schemaIntrospection.directives.map(buildDirective) :\n    [];\n\n  // Then produce and return a Schema with these types.\n  return new GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types,\n    directives,\n  });\n}\n\nfunction cannotExecuteClientSchema() {\n  throw new Error(\n    'Client Schema cannot use Interface or Union types for execution.'\n  );\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}