{"version":3,"sources":["utilities/isValidJSValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;QA2BgB;;AAjBhB;;;;AACA;;;;AACA;;;;;;;;;AAeO,SAAS,cAAT,CAAwB,KAAxB,EAAsC,IAAtC,EAAwE;;AAE7E,MAAI,0CAAJ,EAAoC;AAClC,QAAI,yBAAU,KAAV,CAAJ,EAAsB;AACpB,UAAI,KAAK,MAAL,CAAY,IAAZ,EAAkB;AACpB,eAAO,gBAAe,KAAK,MAAL,CAAY,IAAZ,oBAAf,CAAP,CADoB;OAAtB;AAGA,aAAO,CAAE,sCAAF,CAAP,CAJoB;KAAtB;AAMA,WAAO,eAAe,KAAf,EAAsB,KAAK,MAAL,CAA7B,CAPkC;GAApC;;AAUA,MAAI,yBAAU,KAAV,CAAJ,EAAsB;AACpB,WAAO,EAAP,CADoB;GAAtB;;;AAZ6E,MAiBzE,uCAAJ,EAAiC;;AAC/B,UAAM,WAAW,KAAK,MAAL;AACjB,UAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB;aAAO,MAAM,MAAN,CAAa,UAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAsB;AACxC,gBAAM,SAAS,eAAe,IAAf,EAAqB,QAArB,CAAT,CADkC;AAExC,mBAAO,IAAI,MAAJ,CAAW,OAAO,GAAP,CAAW;sCACZ,eAAU;aADE,CAAtB,CAAP,CAFwC;WAAtB,EAKjB,EALI;SAAP,CADwB;OAA1B;AAQA;WAAO,eAAe,KAAf,EAAsB,QAAtB;OAAP;QAV+B;;;GAAjC;;;AAjB6E,MA+BzE,kDAAJ,EAA4C;AAC1C,QAAI,QAAO,mEAAP,KAAiB,QAAjB,IAA6B,UAAU,IAAV,EAAgB;AAC/C,aAAO,gBAAe,KAAK,IAAL,4BAAf,CAAP,CAD+C;KAAjD;AAGA,QAAM,SAAS,KAAK,SAAL,EAAT,CAJoC;;AAM1C,QAAM,SAAS,EAAT;;;AANoC;;;;;AAS1C,sDAA4B,oBAAY,KAAZ,SAA5B,oGAAgD;YAArC,4BAAqC;;AAC9C,YAAI,CAAC,OAAO,aAAP,CAAD,EAAwB;AAC1B,iBAAO,IAAP,gBAAyB,mCAAzB,EAD0B;SAA5B;OADF;;;;;;;;;;;;;;;;KAT0C;;;;;;;;YAgB/B;;AACT,YAAM,YACJ,eAAe,MAAM,SAAN,CAAf,EAAiC,OAAO,SAAP,EAAkB,IAAlB,CAD7B;AAEN,eAAO,IAAP,gDAAgB,UAAU,GAAV,CAAc;gCACf,oBAAe;SADA,EAA9B;;;AAHF,uDAAwB,oBAAY,MAAZ,UAAxB,wGAA6C;;OAA7C;;;;;;;;;;;;;;KAhB0C;;AAuB1C,WAAO,MAAP,CAvB0C;GAA5C;;AA0BA,2BACE,iDAAqC,2CAArC,EACA,oBAFF;;;;AAzD6E,MAgEvE,cAAc,KAAK,UAAL,CAAgB,KAAhB,CAAd,CAhEuE;AAiE7E,MAAI,yBAAU,WAAV,CAAJ,EAA4B;AAC1B,WAAO,qBACa,KAAK,IAAL,iBAAqB,yBAAe,KAAf,OADlC,CAAP,CAD0B;GAA5B;;AAMA,SAAO,EAAP,CAvE6E;CAAxE","file":"utilities/isValidJSValue.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport {\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport type { GraphQLInputType } from '../type/definition';\n\n\n/**\n * Given a JavaScript value and a GraphQL type, determine if the value will be\n * accepted for that type. This is primarily useful for validating the\n * runtime values of query variables.\n */\nexport function isValidJSValue(value: mixed, type: GraphQLInputType): [string] {\n  // A value must be provided if the type is non-null.\n  if (type instanceof GraphQLNonNull) {\n    if (isNullish(value)) {\n      if (type.ofType.name) {\n        return [ `Expected \"${type.ofType.name}!\", found null.` ];\n      }\n      return [ 'Expected non-null value, found null.' ];\n    }\n    return isValidJSValue(value, type.ofType);\n  }\n\n  if (isNullish(value)) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    if (Array.isArray(value)) {\n      return value.reduce((acc, item, index) => {\n        const errors = isValidJSValue(item, itemType);\n        return acc.concat(errors.map(error =>\n          `In element #${index}: ${error}`\n        ));\n      }, []);\n    }\n    return isValidJSValue(value, itemType);\n  }\n\n  // Input objects check each defined field.\n  if (type instanceof GraphQLInputObjectType) {\n    if (typeof value !== 'object' || value === null) {\n      return [ `Expected \"${type.name}\", found not an object.` ];\n    }\n    const fields = type.getFields();\n\n    const errors = [];\n\n    // Ensure every provided field is defined.\n    for (const providedField of Object.keys(value)) {\n      if (!fields[providedField]) {\n        errors.push(`In field \"${providedField}\": Unknown field.`);\n      }\n    }\n\n    // Ensure every defined field is valid.\n    for (const fieldName of Object.keys(fields)) {\n      const newErrors =\n        isValidJSValue(value[fieldName], fields[fieldName].type);\n      errors.push(...(newErrors.map(error =>\n        `In field \"${fieldName}\": ${error}`\n      )));\n    }\n    return errors;\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must be input type'\n  );\n\n  // Scalar/Enum input checks to ensure the type can parse the value to\n  // a non-null value.\n  const parseResult = type.parseValue(value);\n  if (isNullish(parseResult)) {\n    return [\n      `Expected type \"${type.name}\", found ${JSON.stringify(value)}.`\n    ];\n  }\n\n  return [];\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}