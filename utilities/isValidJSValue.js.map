{"version":3,"sources":["utilities/isValidJSValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;QA6BgB;;AAnBhB;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;AAeO,SAAS,cAAT,CAAwB,KAAxB,EAAsC,IAAtC,EAAwE;;AAE7E,MAAI,0CAAJ,EAAoC;AAClC,QAAI,yBAAU,KAAV,CAAJ,EAAsB;AACpB,UAAI,KAAK,MAAL,CAAY,IAAZ,EAAkB;AACpB,eAAO,gBAAe,KAAK,MAAL,CAAY,IAAZ,oBAAf,CAAP,CADoB;OAAtB;AAGA,aAAO,CAAE,sCAAF,CAAP,CAJoB;KAAtB;AAMA,WAAO,eAAe,KAAf,EAAsB,KAAK,MAAL,CAA7B,CAPkC;GAApC;;AAUA,MAAI,yBAAU,KAAV,CAAJ,EAAsB;AACpB,WAAO,EAAP,CADoB;GAAtB;;;AAZ6E,MAiBzE,uCAAJ,EAAiC;;AAC/B,UAAM,WAAW,KAAK,MAAL;AACjB,UAAI,2BAAa,KAAb,CAAJ,EAAyB;;AACvB,cAAM,SAAS,EAAT;AACN,gCAAS,KAAT,EAAsB,UAAC,IAAD,EAAO,KAAP,EAAiB;AACrC,mBAAO,IAAP,CAAY,KAAZ,CAAkB,MAAlB,EAA0B,eAAe,IAAf,EAAqB,QAArB,EAA+B,GAA/B,CAAmC;sCAC5C,eAAU;aADkC,CAA7D,EADqC;WAAjB,CAAtB;AAKA;;iBAAO;;WAAP;YAPuB;;;OAAzB;AASA;WAAO,eAAe,KAAf,EAAsB,QAAtB;OAAP;QAX+B;;;GAAjC;;;AAjB6E,MAgCzE,kDAAJ,EAA4C;;AAC1C,UAAI,QAAO,qDAAP,KAAiB,QAAjB,IAA6B,UAAU,IAAV,EAAgB;AAC/C;aAAO,gBAAe,KAAK,IAAL,4BAAf;SAAP,CAD+C;OAAjD;AAGA,UAAM,SAAS,KAAK,SAAL,EAAT;;AAEN,UAAM,SAAS,EAAT;;;AAGN,aAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,yBAAiB;AAC1C,YAAI,CAAC,OAAO,aAAP,CAAD,EAAwB;AAC1B,iBAAO,IAAP,gBAAyB,mCAAzB,EAD0B;SAA5B;OADyB,CAA3B;;;AAOA,aAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,qBAAa;AACvC,YAAM,YACJ,eAAe,MAAa,SAAb,CAAf,EAAwC,OAAO,SAAP,EAAkB,IAAlB,CADpC,CADiC;AAGvC,eAAO,IAAP,kCAAgB,UAAU,GAAV,CAAc;gCACf,oBAAe;SADA,EAA9B,EAHuC;OAAb,CAA5B;;AAQA;WAAO;OAAP;QAxB0C;;;GAA5C;;AA2BA,2BACE,iDAAqC,2CAArC,EACA,oBAFF;;;;AA3D6E,MAkEvE,cAAc,KAAK,UAAL,CAAgB,KAAhB,CAAd,CAlEuE;AAmE7E,MAAI,yBAAU,WAAV,CAAJ,EAA4B;AAC1B,WAAO,qBACa,KAAK,IAAL,iBAAqB,KAAK,SAAL,CAAe,KAAf,OADlC,CAAP,CAD0B;GAA5B;;AAMA,SAAO,EAAP,CAzE6E;CAAxE","file":"utilities/isValidJSValue.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { forEach, isCollection } from 'iterall';\n\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport {\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} from '../type/definition';\nimport type { GraphQLInputType } from '../type/definition';\n\n\n/**\n * Given a JavaScript value and a GraphQL type, determine if the value will be\n * accepted for that type. This is primarily useful for validating the\n * runtime values of query variables.\n */\nexport function isValidJSValue(value: mixed, type: GraphQLInputType): [string] {\n  // A value must be provided if the type is non-null.\n  if (type instanceof GraphQLNonNull) {\n    if (isNullish(value)) {\n      if (type.ofType.name) {\n        return [ `Expected \"${type.ofType.name}!\", found null.` ];\n      }\n      return [ 'Expected non-null value, found null.' ];\n    }\n    return isValidJSValue(value, type.ofType);\n  }\n\n  if (isNullish(value)) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof GraphQLList) {\n    const itemType = type.ofType;\n    if (isCollection(value)) {\n      const errors = [];\n      forEach((value: any), (item, index) => {\n        errors.push.apply(errors, isValidJSValue(item, itemType).map(error =>\n          `In element #${index}: ${error}`\n        ));\n      });\n      return errors;\n    }\n    return isValidJSValue(value, itemType);\n  }\n\n  // Input objects check each defined field.\n  if (type instanceof GraphQLInputObjectType) {\n    if (typeof value !== 'object' || value === null) {\n      return [ `Expected \"${type.name}\", found not an object.` ];\n    }\n    const fields = type.getFields();\n\n    const errors = [];\n\n    // Ensure every provided field is defined.\n    Object.keys(value).forEach(providedField => {\n      if (!fields[providedField]) {\n        errors.push(`In field \"${providedField}\": Unknown field.`);\n      }\n    });\n\n    // Ensure every defined field is valid.\n    Object.keys(fields).forEach(fieldName => {\n      const newErrors =\n        isValidJSValue((value: any)[fieldName], fields[fieldName].type);\n      errors.push(...(newErrors.map(error =>\n        `In field \"${fieldName}\": ${error}`\n      )));\n    });\n\n    return errors;\n  }\n\n  invariant(\n    type instanceof GraphQLScalarType || type instanceof GraphQLEnumType,\n    'Must be input type'\n  );\n\n  // Scalar/Enum input checks to ensure the type can parse the value to\n  // a non-null value.\n  const parseResult = type.parseValue(value);\n  if (isNullish(parseResult)) {\n    return [\n      `Expected type \"${type.name}\", found ${JSON.stringify(value)}.`\n    ];\n  }\n\n  return [];\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}