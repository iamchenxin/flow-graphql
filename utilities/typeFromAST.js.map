{"version":3,"sources":["utilities/typeFromAST.js"],"names":[],"mappings":";;;;;QAkBgB;;AARhB;;;;AACA;;AAEA;;;;AAKO,SAAS,WAAT,CACL,MADK,EAEL,YAFK,EAGS;AACd,MAAI,qBAAJ,CADc;AAEd,MAAI,aAAa,IAAb,qBAAJ,EAAqC;AACnC,gBAAY,YAAY,MAAZ,EAAoB,aAAa,IAAb,CAAhC,CADmC;AAEnC,WAAO,aAAa,4BAAgB,SAAhB,CAAb,CAF4B;GAArC;AAIA,MAAI,aAAa,IAAb,yBAAJ,EAAyC;AACvC,gBAAY,YAAY,MAAZ,EAAoB,aAAa,IAAb,CAAhC,CADuC;AAEvC,WAAO,aAAa,+BAChB,SADgB,CAAb,CAFgC;GAAzC;AAMA,2BAAU,aAAa,IAAb,sBAAV,EAA4C,uBAA5C,EAZc;AAad,SAAO,OAAO,OAAP,CAAe,aAAa,IAAb,CAAkB,KAAlB,CAAtB,CAbc;CAHT","file":"utilities/typeFromAST.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport { NAMED_TYPE, LIST_TYPE, NON_NULL_TYPE } from '../language/kinds';\nimport type { Type } from '../language/ast';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nimport type { GraphQLType, GraphQLNullableType } from '../type/definition';\nimport type { GraphQLSchema } from '../type/schema';\n\n\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  inputTypeAST: Type\n): ?GraphQLType {\n  let innerType;\n  if (inputTypeAST.kind === LIST_TYPE) {\n    innerType = typeFromAST(schema, inputTypeAST.type);\n    return innerType && new GraphQLList(innerType);\n  }\n  if (inputTypeAST.kind === NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, inputTypeAST.type);\n    return innerType && new GraphQLNonNull(\n      ((innerType: any): GraphQLNullableType)\n    );\n  }\n  invariant(inputTypeAST.kind === NAMED_TYPE, 'Must be a named type.');\n  return schema.getType(inputTypeAST.name.value);\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}