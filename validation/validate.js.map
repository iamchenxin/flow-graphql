{"version":3,"sources":["validation/validate.js"],"names":[],"mappings":"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","file":"validation/validate.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport invariant from '../jsutils/invariant';\nimport { GraphQLError } from '../error';\nimport { visit, visitInParallel, visitWithTypeInfo } from '../language/visitor';\nimport * as Kind from '../language/kinds';\nimport type {\n  Document,\n  OperationDefinition,\n  Variable,\n  SelectionSet,\n  FragmentSpread,\n  FragmentDefinition,\n} from '../language/ast';\nimport { GraphQLSchema } from '../type/schema';\nimport type {\n  GraphQLInputType,\n  GraphQLOutputType,\n  GraphQLCompositeType,\n  GraphQLFieldDefinition,\n  GraphQLArgument\n} from '../type/definition';\nimport type { GraphQLDirective } from '../type/directives';\nimport { TypeInfo } from '../utilities/TypeInfo';\nimport { specifiedRules } from './specifiedRules';\n\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n */\nexport function validate(\n  schema: GraphQLSchema,\n  ast: Document,\n  rules?: Array<any>\n): Array<GraphQLError> {\n  invariant(schema, 'Must provide schema');\n  invariant(ast, 'Must provide document');\n  invariant(\n    schema instanceof GraphQLSchema,\n    'Schema must be an instance of GraphQLSchema. Also ensure that there are ' +\n    'not multiple versions of GraphQL installed in your node_modules directory.'\n  );\n  const typeInfo = new TypeInfo(schema);\n  return visitUsingRules(schema, typeInfo, ast, rules || specifiedRules);\n}\n\n/**\n * This uses a specialized visitor which runs multiple visitors in parallel,\n * while maintaining the visitor skip and break API.\n *\n * @internal\n */\nexport function visitUsingRules(\n  schema: GraphQLSchema,\n  typeInfo: TypeInfo,\n  documentAST: Document,\n  rules: Array<any>\n): Array<GraphQLError> {\n  const context = new ValidationContext(schema, documentAST, typeInfo);\n  const visitors = rules.map(rule => rule(context));\n  // Visit the whole document with each instance of all provided rules.\n  visit(documentAST, visitWithTypeInfo(typeInfo, visitInParallel(visitors)));\n  return context.getErrors();\n}\n\ntype HasSelectionSet = OperationDefinition | FragmentDefinition;\ntype VariableUsage = { node: Variable, type: ?GraphQLInputType };\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ValidationContext {\n  _schema: GraphQLSchema;\n  _ast: Document;\n  _typeInfo: TypeInfo;\n  _errors: Array<GraphQLError>;\n  _fragments: {[name: string]: FragmentDefinition};\n  _fragmentSpreads: Map<SelectionSet, Array<FragmentSpread>>;\n  _recursivelyReferencedFragments:\n    Map<OperationDefinition, Array<FragmentDefinition>>;\n  _variableUsages: Map<HasSelectionSet, Array<VariableUsage>>;\n  _recursiveVariableUsages: Map<OperationDefinition, Array<VariableUsage>>;\n\n  constructor(schema: GraphQLSchema, ast: Document, typeInfo: TypeInfo) {\n    this._schema = schema;\n    this._ast = ast;\n    this._typeInfo = typeInfo;\n    this._errors = [];\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  reportError(error: GraphQLError): void {\n    this._errors.push(error);\n  }\n\n  getErrors(): Array<GraphQLError> {\n    return this._errors;\n  }\n\n  getSchema(): GraphQLSchema {\n    return this._schema;\n  }\n\n  getDocument(): Document {\n    return this._ast;\n  }\n\n  getFragment(name: string): ?FragmentDefinition {\n    let fragments = this._fragments;\n    if (!fragments) {\n      this._fragments = fragments =\n        this.getDocument().definitions.reduce((frags, statement) => {\n          if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n            frags[statement.name.value] = statement;\n          }\n          return frags;\n        }, {});\n    }\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node: SelectionSet): Array<FragmentSpread> {\n    let spreads = this._fragmentSpreads.get(node);\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit: Array<SelectionSet> = [ node ];\n      while (setsToVisit.length !== 0) {\n        const set = setsToVisit.pop();\n        for (let i = 0; i < set.selections.length; i++) {\n          const selection = set.selections[i];\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n      this._fragmentSpreads.set(node, spreads);\n    }\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(\n    operation: OperationDefinition\n  ): Array<FragmentDefinition> {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit: Array<SelectionSet> = [ operation.selectionSet ];\n      while (nodesToVisit.length !== 0) {\n        const node = nodesToVisit.pop();\n        const spreads = this.getFragmentSpreads(node);\n        for (let i = 0; i < spreads.length; i++) {\n          const fragName = spreads[i].name.value;\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n    return fragments;\n  }\n\n  getVariableUsages(node: HasSelectionSet): Array<VariableUsage> {\n    let usages = this._variableUsages.get(node);\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: () => false,\n        Variable(variable) {\n          newUsages.push({ node: variable, type: typeInfo.getInputType() });\n        }\n      }));\n      usages = newUsages;\n      this._variableUsages.set(node, usages);\n    }\n    return usages;\n  }\n\n  getRecursiveVariableUsages(\n    operation: OperationDefinition\n  ): Array<VariableUsage> {\n    let usages = this._recursiveVariableUsages.get(operation);\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n      const fragments = this.getRecursivelyReferencedFragments(operation);\n      for (let i = 0; i < fragments.length; i++) {\n        Array.prototype.push.apply(\n          usages,\n          this.getVariableUsages(fragments[i])\n        );\n      }\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n    return usages;\n  }\n\n  getType(): ?GraphQLOutputType {\n    return this._typeInfo.getType();\n  }\n\n  getParentType(): ?GraphQLCompositeType {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType(): ?GraphQLInputType {\n    return this._typeInfo.getInputType();\n  }\n\n  getFieldDef(): ?GraphQLFieldDefinition {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective(): ?GraphQLDirective {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument(): ?GraphQLArgument {\n    return this._typeInfo.getArgument();\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}