{"version":3,"sources":["validation/rules/NoUnusedVariables.js"],"names":[],"mappings":";;;;;;;;;;QAcgB;QAeA;;AAlBhB;;;;;;;;;;;;;AAGO,SAAS,qBAAT,CACL,OADK,EAEL,MAFK,EAGG;AACR,SAAO,yBACS,6CAAwC,aADjD,mBAES,4BAFT,CADC;CAHH;;;;;;;;AAeA,SAAS,iBAAT,CAA2B,OAA3B,EAA4D;AACjE,MAAI,eAAe,EAAf,CAD6D;;AAGjE,SAAO;AACL,yBAAqB;AACnB,8BAAQ;AACN,uBAAe,EAAf,CADM;OADW;AAInB,4BAAM,WAAW;AACf,YAAM,mBAAmB,sBAAc,IAAd,CAAnB,CADS;AAEf,YAAM,SAAS,QAAQ,0BAAR,CAAmC,SAAnC,CAAT,CAFS;AAGf,YAAM,SAAS,UAAU,IAAV,GAAiB,UAAU,IAAV,CAAe,KAAf,GAAuB,IAAxC,CAHA;;AAKf,eAAO,OAAP,CAAe,gBAAc;cAAX,iBAAW;;AAC3B,2BAAiB,KAAK,IAAL,CAAU,KAAV,CAAjB,GAAoC,IAApC,CAD2B;SAAd,CAAf,CALe;;AASf,qBAAa,OAAb,CAAqB,uBAAe;AAClC,cAAM,eAAe,YAAY,QAAZ,CAAqB,IAArB,CAA0B,KAA1B,CADa;AAElC,cAAI,iBAAiB,YAAjB,MAAmC,IAAnC,EAAyC;AAC3C,oBAAQ,WAAR,CAAoB,wBAClB,sBAAsB,YAAtB,EAAoC,MAApC,CADkB,EAElB,CAAE,WAAF,CAFkB,CAApB,EAD2C;WAA7C;SAFmB,CAArB,CATe;OAJE;KAArB;AAwBA,oDAAmB,KAAK;AACtB,mBAAa,IAAb,CAAkB,GAAlB,EADsB;KAzBnB;GAAP,CAHiE;CAA5D","file":"validation/rules/NoUnusedVariables.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\n\n\nexport function unusedVariableMessage(\n  varName: string,\n  opName: ?string\n): string {\n  return opName ?\n    `Variable \"$${varName}\" is never used in operation \"${opName}\".` :\n    `Variable \"$${varName}\" is never used.`;\n}\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nexport function NoUnusedVariables(context: ValidationContext): any {\n  let variableDefs = [];\n\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n        const opName = operation.name ? operation.name.value : null;\n\n        usages.forEach(({ node }) => {\n          variableNameUsed[node.name.value] = true;\n        });\n\n        variableDefs.forEach(variableDef => {\n          const variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(\n              unusedVariableMessage(variableName, opName),\n              [ variableDef ]\n            ));\n          }\n        });\n      }\n    },\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}