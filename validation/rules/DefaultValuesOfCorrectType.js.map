{"version":3,"sources":["validation/rules/DefaultValuesOfCorrectType.js"],"names":[],"mappings":";;;;;QAkBgB;QAUA;QAiBA;;AAlChB;;AACA;;AACA;;AACA;;AAIO,SAAS,2BAAT,CACL,OADK,EAEL,IAFK,EAGL,SAHK,EAIG;AACR,SAAO,gBAAc,0BAAqB,OAAO,IAAP,wBAAnC,GACL,kCADK,wCAE6B,OAAO,SAAP,SAF7B,CADC;CAJH;;;;;;;;;;AAUA,SAAS,4BAAT,CACL,OADK,EAEL,IAFK,EAGL,KAHK,EAIL,aAJK,EAKG;AACR,MAAM,UAAU,gBAAgB,OAAO,cAAc,IAAd,CAAmB,IAAnB,CAAP,GAAkC,EAAlD,CADR;AAER,SAAO,gBAAc,0BAAqB,OAAO,IAAP,oBAAnC,uBACY,cAAS,QADrB,CAFC;CALH;;;;;;;;AAiBA,SAAS,0BAAT,CAAoC,OAApC,EAAqE;AAC1E,SAAO;AACL,oDAAmB,WAAW;AAC5B,UAAM,OAAO,UAAU,QAAV,CAAmB,IAAnB,CAAwB,KAAxB,CADe;AAE5B,UAAM,eAAe,UAAU,YAAV,CAFO;AAG5B,UAAM,OAAO,QAAQ,YAAR,EAAP,CAHsB;AAI5B,UAAI,8CAAkC,YAAlC,EAAgD;AAClD,gBAAQ,WAAR,CAAoB,wBAClB,4BAA4B,IAA5B,EAAkC,IAAlC,EAAwC,KAAK,MAAL,CADtB,EAElB,CAAE,YAAF,CAFkB,CAApB,EADkD;OAApD;AAMA,UAAI,QAAQ,YAAR,EAAsB;AACxB,YAAM,SAAS,8CAAoB,IAApB,EAA0B,YAA1B,CAAT,CADkB;AAExB,YAAI,UAAU,OAAO,MAAP,GAAgB,CAAhB,EAAmB;AAC/B,kBAAQ,WAAR,CAAoB,wBAClB,6BACE,IADF,EAEE,IAFF,EAGE,oBAAM,YAAN,CAHF,EAIE,MAJF,CADkB,EAOlB,CAAE,YAAF,CAPkB,CAApB,EAD+B;SAAjC;OAFF;AAcA,aAAO,KAAP,CAxB4B;KADzB;;AA2BL,kBAAc;aAAM;KAAN;AACd,wBAAoB;aAAM;KAAN;GA5BtB,CAD0E;CAArE","file":"validation/rules/DefaultValuesOfCorrectType.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport { print } from '../../language/printer';\nimport { GraphQLNonNull } from '../../type/definition';\nimport { isValidLiteralValue } from '../../utilities/isValidLiteralValue';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function defaultForNonNullArgMessage(\n  varName: string,\n  type: GraphQLType,\n  guessType: GraphQLType\n): string {\n  return `Variable \"$${varName}\" of type \"${String(type)}\" is required and ` +\n    'will not use the default value. ' +\n    `Perhaps you meant to use type \"${String(guessType)}\".`;\n}\n\nexport function badValueForDefaultArgMessage(\n  varName: string,\n  type: GraphQLType,\n  value: string,\n  verboseErrors?: [string]\n): string {\n  const message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return `Variable \"$${varName}\" of type \"${String(type)}\" has invalid ` +\n    `default value ${value}.${message}`;\n}\n\n/**\n * Variable default values of correct type\n *\n * A GraphQL document is only valid if all variable default values are of the\n * type expected by their definition.\n */\nexport function DefaultValuesOfCorrectType(context: ValidationContext): any {\n  return {\n    VariableDefinition(varDefAST) {\n      const name = varDefAST.variable.name.value;\n      const defaultValue = varDefAST.defaultValue;\n      const type = context.getInputType();\n      if (type instanceof GraphQLNonNull && defaultValue) {\n        context.reportError(new GraphQLError(\n          defaultForNonNullArgMessage(name, type, type.ofType),\n          [ defaultValue ]\n        ));\n      }\n      if (type && defaultValue) {\n        const errors = isValidLiteralValue(type, defaultValue);\n        if (errors && errors.length > 0) {\n          context.reportError(new GraphQLError(\n            badValueForDefaultArgMessage(\n              name,\n              type,\n              print(defaultValue),\n              errors\n            ),\n            [ defaultValue ]\n          ));\n        }\n      }\n      return false;\n    },\n    SelectionSet: () => false,\n    FragmentDefinition: () => false,\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}