{"version":3,"sources":["validation/rules/NoUnusedFragments.js"],"names":[],"mappings":";;;;;QAcgB;QAUA;;AAbhB;;;;;;;;;;;AAGO,SAAS,iBAAT,CAA2B,QAA3B,EAAqD;AAC1D,wBAAoB,6BAApB,CAD0D;CAArD;;;;;;;;AAUA,SAAS,iBAAT,CAA2B,OAA3B,EAA4D;AACjE,MAAM,gBAAgB,EAAhB,CAD2D;AAEjE,MAAM,eAAe,EAAf,CAF2D;;AAIjE,SAAO;AACL,sDAAoB,MAAM;AACxB,oBAAc,IAAd,CAAmB,IAAnB,EADwB;AAExB,aAAO,KAAP,CAFwB;KADrB;AAKL,oDAAmB,MAAM;AACvB,mBAAa,IAAb,CAAkB,IAAlB,EADuB;AAEvB,aAAO,KAAP,CAFuB;KALpB;;AASL,cAAU;AACR,8BAAQ;AACN,YAAM,mBAAmB,OAAO,MAAP,CAAc,IAAd,CAAnB,CADA;AAEN,sBAAc,OAAd,CAAsB,qBAAa;AACjC,kBAAQ,iCAAR,CAA0C,SAA1C,EAAqD,OAArD,CACE,oBAAY;AAAE,6BAAiB,SAAS,IAAT,CAAc,KAAd,CAAjB,GAAwC,IAAxC,CAAF;WAAZ,CADF,CADiC;SAAb,CAAtB,CAFM;;AAQN,qBAAa,OAAb,CAAqB,uBAAe;AAClC,cAAM,WAAW,YAAY,IAAZ,CAAiB,KAAjB,CADiB;AAElC,cAAI,iBAAiB,QAAjB,MAA+B,IAA/B,EAAqC;AACvC,oBAAQ,WAAR,CAAoB,wBAClB,kBAAkB,QAAlB,CADkB,EAElB,CAAE,WAAF,CAFkB,CAApB,EADuC;WAAzC;SAFmB,CAArB,CARM;OADA;KAAV;GATF,CAJiE;CAA5D","file":"validation/rules/NoUnusedFragments.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\n\n\nexport function unusedFragMessage(fragName: string): string {\n  return `Fragment \"${fragName}\" is never used.`;\n}\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragments(context: ValidationContext): any {\n  const operationDefs = [];\n  const fragmentDefs = [];\n\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n        operationDefs.forEach(operation => {\n          context.getRecursivelyReferencedFragments(operation).forEach(\n            fragment => { fragmentNameUsed[fragment.name.value] = true; }\n          );\n        });\n\n        fragmentDefs.forEach(fragmentDef => {\n          const fragName = fragmentDef.name.value;\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\n              unusedFragMessage(fragName),\n              [ fragmentDef ]\n            ));\n          }\n        });\n      }\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}