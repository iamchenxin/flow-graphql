{"version":3,"sources":["validation/rules/NoFragmentCycles.js"],"names":[],"mappings":";;;;;;;;;;QAegB;QAQA;;AAZhB;;;;;;;;;;;;;AAIO,SAAS,iBAAT,CACL,QADK,EAEL,WAFK,EAGG;AACR,MAAM,MAAM,YAAY,MAAZ,GAAqB,UAAU,YAAY,IAAZ,CAAiB,IAAjB,CAAV,GAAmC,EAAxD,CADJ;AAER,sCAAkC,+BAA0B,SAA5D,CAFQ;CAHH;;AAQA,SAAS,gBAAT,CAA0B,OAA1B,EAA2D;;;AAGhE,MAAM,eAAe,sBAAc,IAAd,CAAf;;;AAH0D,MAM1D,aAAa,EAAb;;;AAN0D,MAS1D,wBAAwB,sBAAc,IAAd,CAAxB,CAT0D;;AAWhE,SAAO;AACL,yBAAqB;aAAM;KAAN;AACrB,oDAAmB,MAAM;AACvB,UAAI,CAAC,aAAa,KAAK,IAAL,CAAU,KAAV,CAAd,EAAgC;AAClC,6BAAqB,IAArB,EADkC;OAApC;AAGA,aAAO,KAAP,CAJuB;KAFpB;GAAP;;;;;AAXgE,WAwBvD,oBAAT,CAA8B,QAA9B,EAA4D;AAC1D,QAAM,eAAe,SAAS,IAAT,CAAc,KAAd,CADqC;AAE1D,iBAAa,YAAb,IAA6B,IAA7B,CAF0D;;AAI1D,QAAM,cAAc,QAAQ,kBAAR,CAA2B,SAAS,YAAT,CAAzC,CAJoD;AAK1D,QAAI,YAAY,MAAZ,KAAuB,CAAvB,EAA0B;AAC5B,aAD4B;KAA9B;;AAIA,0BAAsB,YAAtB,IAAsC,WAAW,MAAX,CAToB;;AAW1D,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,YAAY,MAAZ,EAAoB,GAAxC,EAA6C;AAC3C,UAAM,aAAa,YAAY,CAAZ,CAAb,CADqC;AAE3C,UAAM,aAAa,WAAW,IAAX,CAAgB,KAAhB,CAFwB;AAG3C,UAAM,aAAa,sBAAsB,UAAtB,CAAb,CAHqC;;AAK3C,UAAI,eAAe,SAAf,EAA0B;AAC5B,mBAAW,IAAX,CAAgB,UAAhB,EAD4B;AAE5B,YAAI,CAAC,aAAa,UAAb,CAAD,EAA2B;AAC7B,cAAM,iBAAiB,QAAQ,WAAR,CAAoB,UAApB,CAAjB,CADuB;AAE7B,cAAI,cAAJ,EAAoB;AAClB,iCAAqB,cAArB,EADkB;WAApB;SAFF;AAMA,mBAAW,GAAX,GAR4B;OAA9B,MASO;AACL,YAAM,YAAY,WAAW,KAAX,CAAiB,UAAjB,CAAZ,CADD;AAEL,gBAAQ,WAAR,CAAoB,wBAClB,kBACE,UADF,EAEE,UAAU,GAAV,CAAc;iBAAK,EAAE,IAAF,CAAO,KAAP;SAAL,CAFhB,CADkB,EAKlB,UAAU,MAAV,CAAiB,UAAjB,CALkB,CAApB,EAFK;OATP;KALF;;AA0BA,0BAAsB,YAAtB,IAAsC,SAAtC,CArC0D;GAA5D;CAxBK","file":"validation/rules/NoFragmentCycles.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport type { FragmentDefinition } from '../../language/ast';\n\n\nexport function cycleErrorMessage(\n  fragName: string,\n  spreadNames: Array<string>\n): string {\n  const via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return `Cannot spread fragment \"${fragName}\" within itself${via}.`;\n}\n\nexport function NoFragmentCycles(context: ValidationContext): any {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null);\n\n  // Array of AST nodes used to produce meaningful errors\n  const spreadPath = [];\n\n  // Position in the spread path\n  const spreadPathIndexByName = Object.create(null);\n\n  return {\n    OperationDefinition: () => false,\n    FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n      return false;\n    },\n  };\n\n  // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n  function detectCycleRecursive(fragment: FragmentDefinition) {\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (let i = 0; i < spreadNodes.length; i++) {\n      const spreadNode = spreadNodes[i];\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n        if (!visitedFrags[spreadName]) {\n          const spreadFragment = context.getFragment(spreadName);\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n        spreadPath.pop();\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new GraphQLError(\n          cycleErrorMessage(\n            spreadName,\n            cyclePath.map(s => s.name.value)\n          ),\n          cyclePath.concat(spreadNode)\n        ));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}