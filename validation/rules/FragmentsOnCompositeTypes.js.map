{"version":3,"sources":["validation/rules/FragmentsOnCompositeTypes.js"],"names":[],"mappings":";;;;;QAiBgB;QAMA;QAeA;;AA3BhB;;AACA;;AACA;;;;;;;;;;;AAIO,SAAS,wCAAT,CACL,IADK,EAEG;AACR,+DAA2D,WAA3D,CADQ;CAFH;;AAMA,SAAS,kCAAT,CACL,QADK,EAEL,IAFK,EAGG;AACR,SAAO,eAAa,iDAAb,eACI,YADJ,CADC;CAHH;;;;;;;;;AAeA,SAAS,yBAAT,CAAmC,OAAnC,EAAoE;AACzE,SAAO;AACL,4CAAe,MAAM;AACnB,UAAM,OAAO,QAAQ,OAAR,EAAP,CADa;AAEnB,UAAI,KAAK,aAAL,IAAsB,IAAtB,IAA8B,CAAC,iCAAgB,IAAhB,CAAD,EAAwB;AACxD,gBAAQ,WAAR,CAAoB,wBAClB,yCAAyC,oBAAM,KAAK,aAAL,CAA/C,CADkB,EAElB,CAAE,KAAK,aAAL,CAFgB,CAApB,EADwD;OAA1D;KAHG;AAUL,oDAAmB,MAAM;AACvB,UAAM,OAAO,QAAQ,OAAR,EAAP,CADiB;AAEvB,UAAI,QAAQ,CAAC,iCAAgB,IAAhB,CAAD,EAAwB;AAClC,gBAAQ,WAAR,CAAoB,wBAClB,mCACE,KAAK,IAAL,CAAU,KAAV,EACA,oBAAM,KAAK,aAAL,CAFR,CADkB,EAKlB,CAAE,KAAK,aAAL,CALgB,CAApB,EADkC;OAApC;KAZG;GAAP,CADyE;CAApE","file":"validation/rules/FragmentsOnCompositeTypes.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function inlineFragmentOnNonCompositeErrorMessage(\n  type: GraphQLType\n): string {\n  return `Fragment cannot condition on non composite type \"${type}\".`;\n}\n\nexport function fragmentOnNonCompositeErrorMessage(\n  fragName: string,\n  type: GraphQLType\n): string {\n  return `Fragment \"${fragName}\" cannot condition on non composite ` +\n    `type \"${type}\".`;\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypes(context: ValidationContext): any {\n  return {\n    InlineFragment(node) {\n      const type = context.getType();\n      if (node.typeCondition && type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(\n          inlineFragmentOnNonCompositeErrorMessage(print(node.typeCondition)),\n          [ node.typeCondition ]\n        ));\n      }\n    },\n    FragmentDefinition(node) {\n      const type = context.getType();\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(\n          fragmentOnNonCompositeErrorMessage(\n            node.name.value,\n            print(node.typeCondition)\n          ),\n          [ node.typeCondition ]\n        ));\n      }\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}