{"version":3,"sources":["validation/rules/NoUndefinedVariables.js"],"names":[],"mappings":";;;;;QAcgB;QAYA;;AAfhB;;;;;;;;;;;AAGO,SAAS,mBAAT,CAA6B,OAA7B,EAA8C,MAA9C,EAAuE;AAC5E,SAAO,yBACS,8CAAyC,aADlD,mBAES,6BAFT,CADqE;CAAvE;;;;;;;;AAYA,SAAS,oBAAT,CAA8B,OAA9B,EAA+D;AACpE,MAAI,sBAAsB,OAAO,MAAP,CAAc,IAAd,CAAtB,CADgE;;AAGpE,SAAO;AACL,yBAAqB;AACnB,8BAAQ;AACN,8BAAsB,OAAO,MAAP,CAAc,IAAd,CAAtB,CADM;OADW;AAInB,4BAAM,WAAW;AACf,YAAM,SAAS,QAAQ,0BAAR,CAAmC,SAAnC,CAAT,CADS;;AAGf,eAAO,OAAP,CAAe,gBAAc;cAAX,iBAAW;;AAC3B,cAAM,UAAU,KAAK,IAAL,CAAU,KAAV,CADW;AAE3B,cAAI,oBAAoB,OAApB,MAAiC,IAAjC,EAAuC;AACzC,oBAAQ,WAAR,CAAoB,wBAClB,oBACE,OADF,EAEE,UAAU,IAAV,IAAkB,UAAU,IAAV,CAAe,KAAf,CAHF,EAKlB,CAAE,IAAF,EAAQ,SAAR,CALkB,CAApB,EADyC;WAA3C;SAFa,CAAf,CAHe;OAJE;KAArB;AAqBA,oDAAmB,WAAW;AAC5B,0BAAoB,UAAU,QAAV,CAAmB,IAAnB,CAAwB,KAAxB,CAApB,GAAqD,IAArD,CAD4B;KAtBzB;GAAP,CAHoE;CAA/D","file":"validation/rules/NoUndefinedVariables.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\n\n\nexport function undefinedVarMessage(varName: string, opName: ?string): string {\n  return opName ?\n    `Variable \"$${varName}\" is not defined by operation \"${opName}\".` :\n    `Variable \"$${varName}\" is not defined.`;\n}\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nexport function NoUndefinedVariables(context: ValidationContext): any {\n  let variableNameDefined = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(({ node }) => {\n          const varName = node.name.value;\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(\n              undefinedVarMessage(\n                varName,\n                operation.name && operation.name.value\n              ),\n              [ node, operation ]\n            ));\n          }\n        });\n      }\n    },\n    VariableDefinition(varDefAST) {\n      variableNameDefined[varDefAST.variable.name.value] = true;\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}