{"version":3,"sources":["validation/rules/ScalarLeafs.js"],"names":[],"mappings":";;;;;QAiBgB;QAQA;QAcA;;AA5BhB;;AAEA;;AAIO,SAAS,4BAAT,CACL,KADK,EAEL,IAFK,EAGG;AACR,SAAO,YAAU,wBAAmB,OAAO,IAAP,wBAA7B,GACL,gBADK,CADC;CAHH;;;;;;;;;;AAQA,SAAS,2BAAT,CACL,KADK,EAEL,IAFK,EAGG;AACR,SAAO,YAAU,wBAAmB,OAAO,IAAP,oBAA7B,GACL,gBADK,CADC;CAHH;;;;;;;;AAcA,SAAS,WAAT,CAAqB,OAArB,EAAsD;AAC3D,SAAO;AACL,0BAAM,MAAa;AACjB,UAAM,OAAO,QAAQ,OAAR,EAAP,CADW;AAEjB,UAAI,IAAJ,EAAU;AACR,YAAI,4BAAW,IAAX,CAAJ,EAAsB;AACpB,cAAI,KAAK,YAAL,EAAmB;AACrB,oBAAQ,WAAR,CAAoB,wBAClB,6BAA6B,KAAK,IAAL,CAAU,KAAV,EAAiB,IAA9C,CADkB,EAElB,CAAE,KAAK,YAAL,CAFgB,CAApB,EADqB;WAAvB;SADF,MAOO,IAAI,CAAC,KAAK,YAAL,EAAmB;AAC7B,kBAAQ,WAAR,CAAoB,wBAClB,4BAA4B,KAAK,IAAL,CAAU,KAAV,EAAiB,IAA7C,CADkB,EAElB,CAAE,IAAF,CAFkB,CAApB,EAD6B;SAAxB;OART;KAHG;GAAP,CAD2D;CAAtD","file":"validation/rules/ScalarLeafs.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport type { Field } from '../../language/ast';\nimport { isLeafType } from '../../type/definition';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function noSubselectionAllowedMessage(\n  field: string,\n  type: GraphQLType\n): string {\n  return `Field \"${field}\" of type \"${String(type)}\" must not have a ` +\n    'sub selection.';\n}\n\nexport function requiredSubselectionMessage(\n  field: string,\n  type: GraphQLType\n): string {\n  return `Field \"${field}\" of type \"${String(type)}\" must have a ` +\n    'sub selection.';\n}\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafs(context: ValidationContext): any {\n  return {\n    Field(node: Field) {\n      const type = context.getType();\n      if (type) {\n        if (isLeafType(type)) {\n          if (node.selectionSet) {\n            context.reportError(new GraphQLError(\n              noSubselectionAllowedMessage(node.name.value, type),\n              [ node.selectionSet ]\n            ));\n          }\n        } else if (!node.selectionSet) {\n          context.reportError(new GraphQLError(\n            requiredSubselectionMessage(node.name.value, type),\n            [ node ]\n          ));\n        }\n      }\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}