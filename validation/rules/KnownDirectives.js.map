{"version":3,"sources":["validation/rules/KnownDirectives.js"],"names":[],"mappings":";;;;;QAiCgB;QAIA;QAaA;;AAvChB;;AACA;;;;AACA;;AAiBA;;;;AAGO,SAAS,uBAAT,CAAiC,aAAjC,EAAgE;AACrE,iCAA6B,oBAA7B,CADqE;CAAhE;;;;;;;;;;AAIA,SAAS,yBAAT,CACL,aADK,EAEL,QAFK,EAGG;AACR,yBAAqB,0CAAqC,cAA1D,CADQ;CAHH;;;;;;;;AAaA,SAAS,eAAT,CAAyB,OAAzB,EAA0D;AAC/D,SAAO;AACL,kCAAU,MAAM,KAAK,QAAQ,MAAM,WAAW;AAC5C,UAAM,eAAe,oBACnB,QAAQ,SAAR,GAAoB,aAApB,EADmB,EAEnB;eAAO,IAAI,IAAJ,KAAa,KAAK,IAAL,CAAU,KAAV;OAApB,CAFI,CADsC;AAK5C,UAAI,CAAC,YAAD,EAAe;AACjB,gBAAQ,WAAR,CAAoB,wBAClB,wBAAwB,KAAK,IAAL,CAAU,KAAV,CADN,EAElB,CAAE,IAAF,CAFkB,CAApB,EADiB;AAKjB,eALiB;OAAnB;AAOA,UAAM,oBAAoB,+BAA+B,SAA/B,CAApB,CAZsC;AAa5C,UAAI,CAAC,iBAAD,EAAoB;AACtB,gBAAQ,WAAR,CAAoB,wBAClB,0BAA0B,KAAK,IAAL,CAAU,KAAV,EAAiB,KAAK,IAAL,CADzB,EAElB,CAAE,IAAF,CAFkB,CAApB,EADsB;OAAxB,MAKO,IAAI,aAAa,SAAb,CAAuB,OAAvB,CAA+B,iBAA/B,MAAsD,CAAC,CAAD,EAAI;AACnE,gBAAQ,WAAR,CAAoB,wBAClB,0BAA0B,KAAK,IAAL,CAAU,KAAV,EAAiB,iBAA3C,CADkB,EAElB,CAAE,IAAF,CAFkB,CAApB,EADmE;OAA9D;KAnBJ;GAAP,CAD+D;CAA1D;;AA8BP,SAAS,8BAAT,CAAwC,SAAxC,EAAmD;AACjD,MAAM,YAAY,UAAU,UAAU,MAAV,GAAmB,CAAnB,CAAtB,CAD2C;AAEjD,UAAQ,UAAU,IAAV;AACN;AACE,cAAQ,UAAU,SAAV;AACN,aAAK,OAAL;AAAc,iBAAO,8BAAkB,KAAlB,CAArB;AADF,aAEO,UAAL;AAAiB,iBAAO,8BAAkB,QAAlB,CAAxB;AAFF,aAGO,cAAL;AAAqB,iBAAO,8BAAkB,YAAlB,CAA5B;AAHF,OADF;AAME,YANF;AADF,qBAQE;AAAY,aAAO,8BAAkB,KAAlB,CAAnB;AARF,+BASE;AAAsB,aAAO,8BAAkB,eAAlB,CAA7B;AATF,+BAUE;AAAsB,aAAO,8BAAkB,eAAlB,CAA7B;AAVF,mCAWE;AAA0B,aAAO,8BAAkB,mBAAlB,CAAjC;AAXF,iCAYE;AAAwB,aAAO,8BAAkB,MAAlB,CAA/B;AAZF,sCAaE;AAA6B,aAAO,8BAAkB,MAAlB,CAApC;AAbF,sCAcE;AAA6B,aAAO,8BAAkB,MAAlB,CAApC;AAdF,gCAeE;AAAuB,aAAO,8BAAkB,gBAAlB,CAA9B;AAfF,yCAgBE;AAAgC,aAAO,8BAAkB,SAAlB,CAAvC;AAhBF,qCAiBE;AAA4B,aAAO,8BAAkB,KAAlB,CAAnC;AAjBF,oCAkBE;AAA2B,aAAO,8BAAkB,IAAlB,CAAlC;AAlBF,qCAmBE;AAA4B,aAAO,8BAAkB,UAAlB,CAAnC;AAnBF,4CAoBE;AAAmC,aAAO,8BAAkB,YAAlB,CAA1C;AApBF,sCAqBE;AACE,UAAM,aAAa,UAAU,UAAU,MAAV,GAAmB,CAAnB,CAAvB,CADR;AAEE,aAAO,WAAW,IAAX,2CACL,8BAAkB,sBAAlB,GACA,8BAAkB,mBAAlB,CAJJ;AArBF,GAFiD;CAAnD","file":"validation/rules/KnownDirectives.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport find from '../../jsutils/find';\nimport {\n  FIELD,\n  FRAGMENT_DEFINITION,\n  FRAGMENT_SPREAD,\n  INLINE_FRAGMENT,\n  OPERATION_DEFINITION,\n  SCHEMA_DEFINITION,\n  SCALAR_TYPE_DEFINITION,\n  OBJECT_TYPE_DEFINITION,\n  FIELD_DEFINITION,\n  INPUT_VALUE_DEFINITION,\n  INTERFACE_TYPE_DEFINITION,\n  UNION_TYPE_DEFINITION,\n  ENUM_TYPE_DEFINITION,\n  ENUM_VALUE_DEFINITION,\n  INPUT_OBJECT_TYPE_DEFINITION,\n} from '../../language/kinds';\nimport { DirectiveLocation } from '../../type/directives';\n\n\nexport function unknownDirectiveMessage(directiveName: string): string {\n  return `Unknown directive \"${directiveName}\".`;\n}\n\nexport function misplacedDirectiveMessage(\n  directiveName: string,\n  location: string\n): string {\n  return `Directive \"${directiveName}\" may not be used on ${location}.`;\n}\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\nexport function KnownDirectives(context: ValidationContext): any {\n  return {\n    Directive(node, key, parent, path, ancestors) {\n      const directiveDef = find(\n        context.getSchema().getDirectives(),\n        def => def.name === node.name.value\n      );\n      if (!directiveDef) {\n        context.reportError(new GraphQLError(\n          unknownDirectiveMessage(node.name.value),\n          [ node ]\n        ));\n        return;\n      }\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n      if (!candidateLocation) {\n        context.reportError(new GraphQLError(\n          misplacedDirectiveMessage(node.name.value, node.type),\n          [ node ]\n        ));\n      } else if (directiveDef.locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(\n          misplacedDirectiveMessage(node.name.value, candidateLocation),\n          [ node ]\n        ));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  switch (appliedTo.kind) {\n    case OPERATION_DEFINITION:\n      switch (appliedTo.operation) {\n        case 'query': return DirectiveLocation.QUERY;\n        case 'mutation': return DirectiveLocation.MUTATION;\n        case 'subscription': return DirectiveLocation.SUBSCRIPTION;\n      }\n      break;\n    case FIELD: return DirectiveLocation.FIELD;\n    case FRAGMENT_SPREAD: return DirectiveLocation.FRAGMENT_SPREAD;\n    case INLINE_FRAGMENT: return DirectiveLocation.INLINE_FRAGMENT;\n    case FRAGMENT_DEFINITION: return DirectiveLocation.FRAGMENT_DEFINITION;\n    case SCHEMA_DEFINITION: return DirectiveLocation.SCHEMA;\n    case SCALAR_TYPE_DEFINITION: return DirectiveLocation.SCALAR;\n    case OBJECT_TYPE_DEFINITION: return DirectiveLocation.OBJECT;\n    case FIELD_DEFINITION: return DirectiveLocation.FIELD_DEFINITION;\n    case INTERFACE_TYPE_DEFINITION: return DirectiveLocation.INTERFACE;\n    case UNION_TYPE_DEFINITION: return DirectiveLocation.UNION;\n    case ENUM_TYPE_DEFINITION: return DirectiveLocation.ENUM;\n    case ENUM_VALUE_DEFINITION: return DirectiveLocation.ENUM_VALUE;\n    case INPUT_OBJECT_TYPE_DEFINITION: return DirectiveLocation.INPUT_OBJECT;\n    case INPUT_VALUE_DEFINITION:\n      const parentNode = ancestors[ancestors.length - 3];\n      return parentNode.kind === INPUT_OBJECT_TYPE_DEFINITION ?\n        DirectiveLocation.INPUT_FIELD_DEFINITION :\n        DirectiveLocation.ARGUMENT_DEFINITION;\n  }\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}