{"version":3,"sources":["validation/rules/ArgumentsOfCorrectType.js"],"names":[],"mappings":";;;;;QAiBgB;QAkBA;;AAxBhB;;AACA;;AACA;;;;;;;;;;;AAIO,SAAS,eAAT,CACL,OADK,EAEL,IAFK,EAGL,KAHK,EAIL,aAJK,EAKG;AACR,MAAM,UAAU,gBAAgB,OAAO,cAAc,IAAd,CAAmB,IAAnB,CAAP,GAAkC,EAAlD,CADR;AAER,wBACe,mCAA8B,cAAS,OADtD,CAFQ;CALH;;;;;;;;AAkBA,SAAS,sBAAT,CAAgC,OAAhC,EAAiE;AACtE,SAAO;AACL,gCAAS,QAAQ;AACf,UAAM,SAAS,QAAQ,WAAR,EAAT,CADS;AAEf,UAAI,MAAJ,EAAY;AACV,YAAM,SAAS,8CAAoB,OAAO,IAAP,EAAa,OAAO,KAAP,CAA1C,CADI;AAEV,YAAI,UAAU,OAAO,MAAP,GAAgB,CAAhB,EAAmB;AAC/B,kBAAQ,WAAR,CAAoB,wBAClB,gBACE,OAAO,IAAP,CAAY,KAAZ,EACA,OAAO,IAAP,EACA,oBAAM,OAAO,KAAP,CAHR,EAIE,MAJF,CADkB,EAOlB,CAAE,OAAO,KAAP,CAPgB,CAApB,EAD+B;SAAjC;OAFF;AAcA,aAAO,KAAP,CAhBe;KADZ;GAAP,CADsE;CAAjE","file":"validation/rules/ArgumentsOfCorrectType.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport { print } from '../../language/printer';\nimport { isValidLiteralValue } from '../../utilities/isValidLiteralValue';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function badValueMessage(\n  argName: string,\n  type: GraphQLType,\n  value: string,\n  verboseErrors?: [string]\n): string {\n  const message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return (\n    `Argument \"${argName}\" has invalid value ${value}.${message}`\n  );\n}\n\n/**\n * Argument values of correct type\n *\n * A GraphQL document is only valid if all field argument literal values are\n * of the type expected by their position.\n */\nexport function ArgumentsOfCorrectType(context: ValidationContext): any {\n  return {\n    Argument(argAST) {\n      const argDef = context.getArgument();\n      if (argDef) {\n        const errors = isValidLiteralValue(argDef.type, argAST.value);\n        if (errors && errors.length > 0) {\n          context.reportError(new GraphQLError(\n            badValueMessage(\n              argAST.name.value,\n              argDef.type,\n              print(argAST.value),\n              errors\n            ),\n            [ argAST.value ]\n          ));\n        }\n      }\n      return false;\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}