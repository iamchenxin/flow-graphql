{"version":3,"sources":["validation/rules/ProvidedNonNullArguments.js"],"names":[],"mappings":";;;;;QAiBgB;QASA;QAeA;;AA9BhB;;AACA;;;;AACA;;;;;;;;;;;;;AAIO,SAAS,sBAAT,CACL,SADK,EAEL,OAFK,EAGL,IAHK,EAIG;AACR,SAAO,YAAU,6BAAwB,sBAAlC,UACD,OAAO,IAAP,sCADC,CADC;CAJH;;AASA,SAAS,0BAAT,CACL,aADK,EAEL,OAFK,EAGL,IAHK,EAIG;AACR,SAAO,iBAAe,iCAA4B,sBAA3C,UACD,OAAO,IAAP,sCADC,CADC;CAJH;;;;;;;;AAeA,SAAS,wBAAT,CAAkC,OAAlC,EAAmE;AACxE,SAAO;AACL,WAAO;;;AAEL,4BAAM,UAAU;AACd,YAAM,WAAW,QAAQ,WAAR,EAAX,CADQ;AAEd,YAAI,CAAC,QAAD,EAAW;AACb,iBAAO,KAAP,CADa;SAAf;AAGA,YAAM,UAAU,SAAS,SAAT,IAAsB,EAAtB,CALF;;AAOd,YAAM,YAAY,sBAAO,OAAP,EAAgB;iBAAO,IAAI,IAAJ,CAAS,KAAT;SAAP,CAA5B,CAPQ;AAQd,iBAAS,IAAT,CAAc,OAAd,CAAsB,kBAAU;AAC9B,cAAM,SAAS,UAAU,OAAO,IAAP,CAAnB,CADwB;AAE9B,cAAI,CAAC,MAAD,IAAW,OAAO,IAAP,sCAAX,EAAkD;AACpD,oBAAQ,WAAR,CAAoB,wBAClB,uBACE,SAAS,IAAT,CAAc,KAAd,EACA,OAAO,IAAP,EACA,OAAO,IAAP,CAJgB,EAMlB,CAAE,QAAF,CANkB,CAApB,EADoD;WAAtD;SAFoB,CAAtB,CARc;OAFX;KAAP;;AA0BA,eAAW;;;AAET,4BAAM,cAAc;AAClB,YAAM,eAAe,QAAQ,YAAR,EAAf,CADY;AAElB,YAAI,CAAC,YAAD,EAAe;AACjB,iBAAO,KAAP,CADiB;SAAnB;AAGA,YAAM,UAAU,aAAa,SAAb,IAA0B,EAA1B,CALE;;AAOlB,YAAM,YAAY,sBAAO,OAAP,EAAgB;iBAAO,IAAI,IAAJ,CAAS,KAAT;SAAP,CAA5B,CAPY;AAQlB,qBAAa,IAAb,CAAkB,OAAlB,CAA0B,kBAAU;AAClC,cAAM,SAAS,UAAU,OAAO,IAAP,CAAnB,CAD4B;AAElC,cAAI,CAAC,MAAD,IAAW,OAAO,IAAP,sCAAX,EAAkD;AACpD,oBAAQ,WAAR,CAAoB,wBAClB,2BACE,aAAa,IAAb,CAAkB,KAAlB,EACA,OAAO,IAAP,EACA,OAAO,IAAP,CAJgB,EAMlB,CAAE,YAAF,CANkB,CAApB,EADoD;WAAtD;SAFwB,CAA1B,CARkB;OAFX;KAAX;GA3BF,CADwE;CAAnE","file":"validation/rules/ProvidedNonNullArguments.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport keyMap from '../../jsutils/keyMap';\nimport { GraphQLNonNull } from '../../type/definition';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function missingFieldArgMessage(\n  fieldName: string,\n  argName: string,\n  type: GraphQLType\n): string {\n  return `Field \"${fieldName}\" argument \"${argName}\" of type ` +\n    `\"${String(type)}\" is required but not provided.`;\n}\n\nexport function missingDirectiveArgMessage(\n  directiveName: string,\n  argName: string,\n  type: GraphQLType\n): string {\n  return `Directive \"@${directiveName}\" argument \"${argName}\" of type ` +\n    `\"${String(type)}\" is required but not provided.`;\n}\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null) field arguments\n * have been provided.\n */\nexport function ProvidedNonNullArguments(context: ValidationContext): any {\n  return {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldAST) {\n        const fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          return false;\n        }\n        const argASTs = fieldAST.arguments || [];\n\n        const argASTMap = keyMap(argASTs, arg => arg.name.value);\n        fieldDef.args.forEach(argDef => {\n          const argAST = argASTMap[argDef.name];\n          if (!argAST && argDef.type instanceof GraphQLNonNull) {\n            context.reportError(new GraphQLError(\n              missingFieldArgMessage(\n                fieldAST.name.value,\n                argDef.name,\n                argDef.type\n              ),\n              [ fieldAST ]\n            ));\n          }\n        });\n      }\n    },\n\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveAST) {\n        const directiveDef = context.getDirective();\n        if (!directiveDef) {\n          return false;\n        }\n        const argASTs = directiveAST.arguments || [];\n\n        const argASTMap = keyMap(argASTs, arg => arg.name.value);\n        directiveDef.args.forEach(argDef => {\n          const argAST = argASTMap[argDef.name];\n          if (!argAST && argDef.type instanceof GraphQLNonNull) {\n            context.reportError(new GraphQLError(\n              missingDirectiveArgMessage(\n                directiveAST.name.value,\n                argDef.name,\n                argDef.type\n              ),\n              [ directiveAST ]\n            ));\n          }\n        });\n      }\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}