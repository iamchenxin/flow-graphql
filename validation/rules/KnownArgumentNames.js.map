{"version":3,"sources":["validation/rules/KnownArgumentNames.js"],"names":[],"mappings":";;;;;QAuBgB;QAcA;QAmBA;;AA7ChB;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAOO,SAAS,iBAAT,CACL,OADK,EAEL,SAFK,EAGL,IAHK,EAIL,aAJK,EAKG;AACR,MAAI,UAAU,uBAAqB,2BAAsB,mBAA3C,eACH,YADG,CADN;AAGR,MAAI,cAAc,MAAd,EAAsB;AACxB,kCAA4B,4BAAa,aAAb,OAA5B,CADwB;GAA1B;AAGA,SAAO,OAAP,CANQ;CALH;;;;;;;;;;AAcA,SAAS,0BAAT,CACL,OADK,EAEL,aAFK,EAGL,aAHK,EAIG;AACR,MAAI,iCACmB,gCAA2B,oBAD9C,CADI;AAGR,MAAI,cAAc,MAAd,EAAsB;AACxB,kCAA4B,4BAAa,aAAb,OAA5B,CADwB;GAA1B;AAGA,SAAO,OAAP,CANQ;CAJH;;;;;;;;AAmBA,SAAS,kBAAT,CAA4B,OAA5B,EAA6D;AAClE,SAAO;AACL,gCAAS,MAAM,KAAK,QAAQ,MAAM,WAAW;AAC3C,UAAM,aAAa,UAAU,UAAU,MAAV,GAAmB,CAAnB,CAAvB,CADqC;AAE3C,UAAI,WAAW,IAAX,iBAAJ,EAA+B;AAC7B,YAAM,WAAW,QAAQ,WAAR,EAAX,CADuB;AAE7B,YAAI,QAAJ,EAAc;AACZ,cAAM,cAAc,oBAClB,SAAS,IAAT,EACA;mBAAO,IAAI,IAAJ,KAAa,KAAK,IAAL,CAAU,KAAV;WAApB,CAFI,CADM;AAKZ,cAAI,CAAC,WAAD,EAAc;AAChB,gBAAM,aAAa,QAAQ,aAAR,EAAb,CADU;AAEhB,qCAAU,UAAV,EAFgB;AAGhB,oBAAQ,WAAR,CAAoB,wBAClB,kBACE,KAAK,IAAL,CAAU,KAAV,EACA,SAAS,IAAT,EACA,WAAW,IAAX,EACA,8BACE,KAAK,IAAL,CAAU,KAAV,EACA,SAAS,IAAT,CAAc,GAAd,CAAkB;qBAAO,IAAI,IAAJ;aAAP,CAFpB,CAJF,CADkB,EAUlB,CAAE,IAAF,CAVkB,CAApB,EAHgB;WAAlB;SALF;OAFF,MAwBO,IAAI,WAAW,IAAX,qBAAJ,EAAmC;AACxC,YAAM,YAAY,QAAQ,YAAR,EAAZ,CADkC;AAExC,YAAI,SAAJ,EAAe;AACb,cAAM,kBAAkB,oBACtB,UAAU,IAAV,EACA;mBAAO,IAAI,IAAJ,KAAa,KAAK,IAAL,CAAU,KAAV;WAApB,CAFI,CADO;AAKb,cAAI,CAAC,eAAD,EAAkB;AACpB,oBAAQ,WAAR,CAAoB,wBAClB,2BACE,KAAK,IAAL,CAAU,KAAV,EACA,UAAU,IAAV,EACA,8BACE,KAAK,IAAL,CAAU,KAAV,EACA,UAAU,IAAV,CAAe,GAAf,CAAmB;qBAAO,IAAI,IAAJ;aAAP,CAFrB,CAHF,CADkB,EASlB,CAAE,IAAF,CATkB,CAApB,EADoB;WAAtB;SALF;OAFK;KA3BJ;GAAP,CADkE;CAA7D","file":"validation/rules/KnownArgumentNames.js","sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { ValidationContext } from '../index';\nimport { GraphQLError } from '../../error';\nimport find from '../../jsutils/find';\nimport invariant from '../../jsutils/invariant';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport {\n  FIELD,\n  DIRECTIVE\n} from '../../language/kinds';\nimport type { GraphQLType } from '../../type/definition';\n\n\nexport function unknownArgMessage(\n  argName: string,\n  fieldName: string,\n  type: GraphQLType,\n  suggestedArgs: Array<string>\n): string {\n  let message = `Unknown argument \"${argName}\" on field \"${fieldName}\" of ` +\n    `type \"${type}\".`;\n  if (suggestedArgs.length) {\n    message += ` Did you mean ${quotedOrList(suggestedArgs)}?`;\n  }\n  return message;\n}\n\nexport function unknownDirectiveArgMessage(\n  argName: string,\n  directiveName: string,\n  suggestedArgs: Array<string>\n): string {\n  let message =\n    `Unknown argument \"${argName}\" on directive \"@${directiveName}\".`;\n  if (suggestedArgs.length) {\n    message += ` Did you mean ${quotedOrList(suggestedArgs)}?`;\n  }\n  return message;\n}\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNames(context: ValidationContext): any {\n  return {\n    Argument(node, key, parent, path, ancestors) {\n      const argumentOf = ancestors[ancestors.length - 1];\n      if (argumentOf.kind === FIELD) {\n        const fieldDef = context.getFieldDef();\n        if (fieldDef) {\n          const fieldArgDef = find(\n            fieldDef.args,\n            arg => arg.name === node.name.value\n          );\n          if (!fieldArgDef) {\n            const parentType = context.getParentType();\n            invariant(parentType);\n            context.reportError(new GraphQLError(\n              unknownArgMessage(\n                node.name.value,\n                fieldDef.name,\n                parentType.name,\n                suggestionList(\n                  node.name.value,\n                  fieldDef.args.map(arg => arg.name)\n                )\n              ),\n              [ node ]\n            ));\n          }\n        }\n      } else if (argumentOf.kind === DIRECTIVE) {\n        const directive = context.getDirective();\n        if (directive) {\n          const directiveArgDef = find(\n            directive.args,\n            arg => arg.name === node.name.value\n          );\n          if (!directiveArgDef) {\n            context.reportError(new GraphQLError(\n              unknownDirectiveArgMessage(\n                node.name.value,\n                directive.name,\n                suggestionList(\n                  node.name.value,\n                  directive.args.map(arg => arg.name)\n                )\n              ),\n              [ node ]\n            ));\n          }\n        }\n      }\n    }\n  };\n}\n"],"sourceRoot":"/home/iamchenxin/project/fork/graphql-js/src"}